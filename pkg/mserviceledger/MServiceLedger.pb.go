// Copyright 2020 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MServiceLedger.proto

/*
Package mserviceledger is a generated protocol buffer package.

It is generated from these files:
	MServiceLedger.proto

It has these top-level messages:
	GLOrganization
	GLAccount
	GLAccountType
	GLTransaction
	GLTransactionWrapper
	GLTransactionType
	GLParty
	GLTransactionDetail
	CreateOrganizationRequest
	CreateOrganizationResponse
	UpdateOrganizationRequest
	UpdateOrganizationResponse
	DeleteOrganizationRequest
	DeleteOrganizationResponse
	GetOrganizationByIdRequest
	GetOrganizationByIdResponse
	GetOrganizationsByMserviceRequest
	GetOrganizationsByMserviceResponse
	CreateAccountTypeRequest
	CreateAccountTypeResponse
	UpdateAccountTypeRequest
	UpdateAccountTypeResponse
	DeleteAccountTypeRequest
	DeleteAccountTypeResponse
	GetAccountTypeByIdRequest
	GetAccountTypeByIdResponse
	GetAccountTypesByMserviceRequest
	GetAccountTypesByMserviceResponse
	CreateTransactionTypeRequest
	CreateTransactionTypeResponse
	UpdateTransactionTypeRequest
	UpdateTransactionTypeResponse
	DeleteTransactionTypeRequest
	DeleteTransactionTypeResponse
	GetTransactionTypeByIdRequest
	GetTransactionTypeByIdResponse
	GetTransactionTypesByMserviceRequest
	GetTransactionTypesByMserviceResponse
	CreatePartyRequest
	CreatePartyResponse
	UpdatePartyRequest
	UpdatePartyResponse
	DeletePartyRequest
	DeletePartyResponse
	GetPartyByIdRequest
	GetPartyByIdResponse
	GetPartiesByMserviceRequest
	GetPartiesByMserviceResponse
	CreateAccountRequest
	CreateAccountResponse
	UpdateAccountRequest
	UpdateAccountResponse
	DeleteAccountRequest
	DeleteAccountResponse
	GetAccountByIdRequest
	GetAccountByIdResponse
	GetAccountsByOrganizationRequest
	GetAccountsByOrganizationResponse
	CreateTransactionRequest
	CreateTransactionResponse
	UpdateTransactionRequest
	UpdateTransactionResponse
	DeleteTransactionRequest
	DeleteTransactionResponse
	GetTransactionByIdRequest
	GetTransactionByIdResponse
	GetTransactionWrapperByIdRequest
	GetTransactionWrapperByIdResponse
	GetTransactionWrappersByDateRequest
	GetTransactionWrappersByDateResponse
	AddTransactionDetailsRequest
	AddTransactionDetailsResponse
*/
package mserviceledger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dml "github.com/gaterace/dml-go/pkg/dml"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MService general ledger organization entity
type GLOrganization struct {
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization name
	OrganizationName string `protobuf:"bytes,8,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// starting date for organization books
	FromDate *dml.DateTime `protobuf:"bytes,9,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	// ending date for organization books
	ToDate *dml.DateTime `protobuf:"bytes,10,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
}

func (m *GLOrganization) Reset()                    { *m = GLOrganization{} }
func (m *GLOrganization) String() string            { return proto.CompactTextString(m) }
func (*GLOrganization) ProtoMessage()               {}
func (*GLOrganization) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GLOrganization) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GLOrganization) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLOrganization) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLOrganization) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLOrganization) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLOrganization) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLOrganization) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLOrganization) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *GLOrganization) GetFromDate() *dml.DateTime {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *GLOrganization) GetToDate() *dml.DateTime {
	if m != nil {
		return m.ToDate
	}
	return nil
}

// MService general ledger account entity
type GLAccount struct {
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,1,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,8,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// organization name
	OrganizationName string `protobuf:"bytes,9,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// general ledger account name
	AccountName string `protobuf:"bytes,10,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// general ledger account description
	AccountDescription string `protobuf:"bytes,11,opt,name=account_description,json=accountDescription" json:"account_description,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,12,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// general ledger account type
	AccountType string `protobuf:"bytes,13,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
}

func (m *GLAccount) Reset()                    { *m = GLAccount{} }
func (m *GLAccount) String() string            { return proto.CompactTextString(m) }
func (*GLAccount) ProtoMessage()               {}
func (*GLAccount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GLAccount) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *GLAccount) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLAccount) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLAccount) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLAccount) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLAccount) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLAccount) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLAccount) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GLAccount) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *GLAccount) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GLAccount) GetAccountDescription() string {
	if m != nil {
		return m.AccountDescription
	}
	return ""
}

func (m *GLAccount) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

func (m *GLAccount) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

// MService general ledger account type entity
type GLAccountType struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,5,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
	// general ledger account type
	AccountType string `protobuf:"bytes,8,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
}

func (m *GLAccountType) Reset()                    { *m = GLAccountType{} }
func (m *GLAccountType) String() string            { return proto.CompactTextString(m) }
func (*GLAccountType) ProtoMessage()               {}
func (*GLAccountType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GLAccountType) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLAccountType) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

func (m *GLAccountType) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLAccountType) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLAccountType) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLAccountType) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLAccountType) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLAccountType) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

// MService general ledger transaction entity
type GLTransaction struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,8,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// transaction date
	TransactionDate *dml.DateTime `protobuf:"bytes,9,opt,name=transaction_date,json=transactionDate" json:"transaction_date,omitempty"`
	// transaction description
	TransactionDescription string `protobuf:"bytes,10,opt,name=transaction_description,json=transactionDescription" json:"transaction_description,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,11,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// transaction type description
	TransactionType string `protobuf:"bytes,12,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	// identifier of transaction from party
	FromPartyId int64 `protobuf:"varint,13,opt,name=from_party_id,json=fromPartyId" json:"from_party_id,omitempty"`
	// from party name
	FromPartyName string `protobuf:"bytes,14,opt,name=from_party_name,json=fromPartyName" json:"from_party_name,omitempty"`
	// identifier of transaction to party
	ToPartyId int64 `protobuf:"varint,15,opt,name=to_party_id,json=toPartyId" json:"to_party_id,omitempty"`
	// to party name
	ToPartyName string `protobuf:"bytes,16,opt,name=to_party_name,json=toPartyName" json:"to_party_name,omitempty"`
	// associated key from external system
	PostedViaKey string `protobuf:"bytes,17,opt,name=posted_via_key,json=postedViaKey" json:"posted_via_key,omitempty"`
	// date posted on external system
	PostedViaDate *dml.DateTime `protobuf:"bytes,18,opt,name=posted_via_date,json=postedViaDate" json:"posted_via_date,omitempty"`
}

func (m *GLTransaction) Reset()                    { *m = GLTransaction{} }
func (m *GLTransaction) String() string            { return proto.CompactTextString(m) }
func (*GLTransaction) ProtoMessage()               {}
func (*GLTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GLTransaction) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *GLTransaction) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLTransaction) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLTransaction) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLTransaction) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLTransaction) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLTransaction) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLTransaction) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GLTransaction) GetTransactionDate() *dml.DateTime {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *GLTransaction) GetTransactionDescription() string {
	if m != nil {
		return m.TransactionDescription
	}
	return ""
}

func (m *GLTransaction) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *GLTransaction) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *GLTransaction) GetFromPartyId() int64 {
	if m != nil {
		return m.FromPartyId
	}
	return 0
}

func (m *GLTransaction) GetFromPartyName() string {
	if m != nil {
		return m.FromPartyName
	}
	return ""
}

func (m *GLTransaction) GetToPartyId() int64 {
	if m != nil {
		return m.ToPartyId
	}
	return 0
}

func (m *GLTransaction) GetToPartyName() string {
	if m != nil {
		return m.ToPartyName
	}
	return ""
}

func (m *GLTransaction) GetPostedViaKey() string {
	if m != nil {
		return m.PostedViaKey
	}
	return ""
}

func (m *GLTransaction) GetPostedViaDate() *dml.DateTime {
	if m != nil {
		return m.PostedViaDate
	}
	return nil
}

// MService general ledger transaction entity wrapper
type GLTransactionWrapper struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,7,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,8,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// transaction date
	TransactionDate *dml.DateTime `protobuf:"bytes,9,opt,name=transaction_date,json=transactionDate" json:"transaction_date,omitempty"`
	// transaction description
	TransactionDescription string `protobuf:"bytes,10,opt,name=transaction_description,json=transactionDescription" json:"transaction_description,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,11,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// transaction type description
	TransactionType string `protobuf:"bytes,12,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	// identifier of transaction from party
	FromPartyId int64 `protobuf:"varint,13,opt,name=from_party_id,json=fromPartyId" json:"from_party_id,omitempty"`
	// from party name
	FromPartyName string `protobuf:"bytes,14,opt,name=from_party_name,json=fromPartyName" json:"from_party_name,omitempty"`
	// identifier of transaction to party
	ToPartyId int64 `protobuf:"varint,15,opt,name=to_party_id,json=toPartyId" json:"to_party_id,omitempty"`
	// to party name
	ToPartyName string `protobuf:"bytes,16,opt,name=to_party_name,json=toPartyName" json:"to_party_name,omitempty"`
	// associated key from external system
	PostedViaKey string `protobuf:"bytes,17,opt,name=posted_via_key,json=postedViaKey" json:"posted_via_key,omitempty"`
	// date posted on external system
	PostedViaDate *dml.DateTime `protobuf:"bytes,18,opt,name=posted_via_date,json=postedViaDate" json:"posted_via_date,omitempty"`
	// list of general ledger transaction detail objects
	GlTransactionDetails []*GLTransactionDetail `protobuf:"bytes,19,rep,name=gl_transaction_details,json=glTransactionDetails" json:"gl_transaction_details,omitempty"`
}

func (m *GLTransactionWrapper) Reset()                    { *m = GLTransactionWrapper{} }
func (m *GLTransactionWrapper) String() string            { return proto.CompactTextString(m) }
func (*GLTransactionWrapper) ProtoMessage()               {}
func (*GLTransactionWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GLTransactionWrapper) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *GLTransactionWrapper) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLTransactionWrapper) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLTransactionWrapper) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLTransactionWrapper) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLTransactionWrapper) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLTransactionWrapper) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLTransactionWrapper) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GLTransactionWrapper) GetTransactionDate() *dml.DateTime {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *GLTransactionWrapper) GetTransactionDescription() string {
	if m != nil {
		return m.TransactionDescription
	}
	return ""
}

func (m *GLTransactionWrapper) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *GLTransactionWrapper) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

func (m *GLTransactionWrapper) GetFromPartyId() int64 {
	if m != nil {
		return m.FromPartyId
	}
	return 0
}

func (m *GLTransactionWrapper) GetFromPartyName() string {
	if m != nil {
		return m.FromPartyName
	}
	return ""
}

func (m *GLTransactionWrapper) GetToPartyId() int64 {
	if m != nil {
		return m.ToPartyId
	}
	return 0
}

func (m *GLTransactionWrapper) GetToPartyName() string {
	if m != nil {
		return m.ToPartyName
	}
	return ""
}

func (m *GLTransactionWrapper) GetPostedViaKey() string {
	if m != nil {
		return m.PostedViaKey
	}
	return ""
}

func (m *GLTransactionWrapper) GetPostedViaDate() *dml.DateTime {
	if m != nil {
		return m.PostedViaDate
	}
	return nil
}

func (m *GLTransactionWrapper) GetGlTransactionDetails() []*GLTransactionDetail {
	if m != nil {
		return m.GlTransactionDetails
	}
	return nil
}

// MService general ledger transaction type entity
type GLTransactionType struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,2,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,5,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
	// transaction type description
	TransactionType string `protobuf:"bytes,8,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
}

func (m *GLTransactionType) Reset()                    { *m = GLTransactionType{} }
func (m *GLTransactionType) String() string            { return proto.CompactTextString(m) }
func (*GLTransactionType) ProtoMessage()               {}
func (*GLTransactionType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GLTransactionType) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLTransactionType) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *GLTransactionType) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLTransactionType) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLTransactionType) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLTransactionType) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLTransactionType) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLTransactionType) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

// MService general ledger transaction party entity
type GLParty struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// transaction party identifier
	PartyId int64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,5,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,6,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,7,opt,name=version" json:"version,omitempty"`
	// transaction party name
	PartyName string `protobuf:"bytes,8,opt,name=party_name,json=partyName" json:"party_name,omitempty"`
}

func (m *GLParty) Reset()                    { *m = GLParty{} }
func (m *GLParty) String() string            { return proto.CompactTextString(m) }
func (*GLParty) ProtoMessage()               {}
func (*GLParty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GLParty) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GLParty) GetPartyId() int64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

func (m *GLParty) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *GLParty) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *GLParty) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *GLParty) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *GLParty) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GLParty) GetPartyName() string {
	if m != nil {
		return m.PartyName
	}
	return ""
}

// MService general ledger transaction detail entity
type GLTransactionDetail struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// transaction detail sequence number
	SequenceNumber int32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,3,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// general ledger account name
	AccountName string `protobuf:"bytes,4,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// transaction detail amount
	Amount *dml.Decimal `protobuf:"bytes,5,opt,name=amount" json:"amount,omitempty"`
	// transaction detail is debit (true) else credit
	IsDebit bool `protobuf:"varint,6,opt,name=is_debit,json=isDebit" json:"is_debit,omitempty"`
}

func (m *GLTransactionDetail) Reset()                    { *m = GLTransactionDetail{} }
func (m *GLTransactionDetail) String() string            { return proto.CompactTextString(m) }
func (*GLTransactionDetail) ProtoMessage()               {}
func (*GLTransactionDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GLTransactionDetail) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *GLTransactionDetail) GetSequenceNumber() int32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *GLTransactionDetail) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *GLTransactionDetail) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GLTransactionDetail) GetAmount() *dml.Decimal {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *GLTransactionDetail) GetIsDebit() bool {
	if m != nil {
		return m.IsDebit
	}
	return false
}

// request parameters for method create_organization
type CreateOrganizationRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization name
	OrganizationName string `protobuf:"bytes,2,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// starting date for organization books
	FromDate *dml.DateTime `protobuf:"bytes,3,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	// ending date for organization books
	ToDate *dml.DateTime `protobuf:"bytes,4,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
}

func (m *CreateOrganizationRequest) Reset()                    { *m = CreateOrganizationRequest{} }
func (m *CreateOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateOrganizationRequest) ProtoMessage()               {}
func (*CreateOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateOrganizationRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateOrganizationRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *CreateOrganizationRequest) GetFromDate() *dml.DateTime {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *CreateOrganizationRequest) GetToDate() *dml.DateTime {
	if m != nil {
		return m.ToDate
	}
	return nil
}

// response parameters for method create_organization
type CreateOrganizationResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,3,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (m *CreateOrganizationResponse) Reset()                    { *m = CreateOrganizationResponse{} }
func (m *CreateOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateOrganizationResponse) ProtoMessage()               {}
func (*CreateOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateOrganizationResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateOrganizationResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateOrganizationResponse) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *CreateOrganizationResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_organization
type UpdateOrganizationRequest struct {
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// organization name
	OrganizationName string `protobuf:"bytes,4,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// starting date for organization books
	FromDate *dml.DateTime `protobuf:"bytes,5,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	// ending date for organization books
	ToDate *dml.DateTime `protobuf:"bytes,6,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
}

func (m *UpdateOrganizationRequest) Reset()                    { *m = UpdateOrganizationRequest{} }
func (m *UpdateOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateOrganizationRequest) ProtoMessage()               {}
func (*UpdateOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateOrganizationRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *UpdateOrganizationRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateOrganizationRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateOrganizationRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *UpdateOrganizationRequest) GetFromDate() *dml.DateTime {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *UpdateOrganizationRequest) GetToDate() *dml.DateTime {
	if m != nil {
		return m.ToDate
	}
	return nil
}

// response parameters for method update_organization
type UpdateOrganizationResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateOrganizationResponse) Reset()                    { *m = UpdateOrganizationResponse{} }
func (m *UpdateOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateOrganizationResponse) ProtoMessage()               {}
func (*UpdateOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateOrganizationResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateOrganizationResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateOrganizationResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_organization
type DeleteOrganizationRequest struct {
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteOrganizationRequest) Reset()                    { *m = DeleteOrganizationRequest{} }
func (m *DeleteOrganizationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteOrganizationRequest) ProtoMessage()               {}
func (*DeleteOrganizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteOrganizationRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *DeleteOrganizationRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteOrganizationRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_organization
type DeleteOrganizationResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteOrganizationResponse) Reset()                    { *m = DeleteOrganizationResponse{} }
func (m *DeleteOrganizationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteOrganizationResponse) ProtoMessage()               {}
func (*DeleteOrganizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DeleteOrganizationResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteOrganizationResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteOrganizationResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_organization_by_id
type GetOrganizationByIdRequest struct {
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,1,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetOrganizationByIdRequest) Reset()                    { *m = GetOrganizationByIdRequest{} }
func (m *GetOrganizationByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationByIdRequest) ProtoMessage()               {}
func (*GetOrganizationByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetOrganizationByIdRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GetOrganizationByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_organization_by_id
type GetOrganizationByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger organization object
	GlOrganization *GLOrganization `protobuf:"bytes,3,opt,name=gl_organization,json=glOrganization" json:"gl_organization,omitempty"`
}

func (m *GetOrganizationByIdResponse) Reset()                    { *m = GetOrganizationByIdResponse{} }
func (m *GetOrganizationByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetOrganizationByIdResponse) ProtoMessage()               {}
func (*GetOrganizationByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetOrganizationByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetOrganizationByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetOrganizationByIdResponse) GetGlOrganization() *GLOrganization {
	if m != nil {
		return m.GlOrganization
	}
	return nil
}

// request parameters for method get_organizations_by_mservice
type GetOrganizationsByMserviceRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetOrganizationsByMserviceRequest) Reset()         { *m = GetOrganizationsByMserviceRequest{} }
func (m *GetOrganizationsByMserviceRequest) String() string { return proto.CompactTextString(m) }
func (*GetOrganizationsByMserviceRequest) ProtoMessage()    {}
func (*GetOrganizationsByMserviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *GetOrganizationsByMserviceRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_organizations_by_mservice
type GetOrganizationsByMserviceResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger organization objects
	GlOrganizations []*GLOrganization `protobuf:"bytes,3,rep,name=gl_organizations,json=glOrganizations" json:"gl_organizations,omitempty"`
}

func (m *GetOrganizationsByMserviceResponse) Reset()         { *m = GetOrganizationsByMserviceResponse{} }
func (m *GetOrganizationsByMserviceResponse) String() string { return proto.CompactTextString(m) }
func (*GetOrganizationsByMserviceResponse) ProtoMessage()    {}
func (*GetOrganizationsByMserviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *GetOrganizationsByMserviceResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetOrganizationsByMserviceResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetOrganizationsByMserviceResponse) GetGlOrganizations() []*GLOrganization {
	if m != nil {
		return m.GlOrganizations
	}
	return nil
}

// request parameters for method create_account_type
type CreateAccountTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// general ledger account type
	AccountType string `protobuf:"bytes,3,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
}

func (m *CreateAccountTypeRequest) Reset()                    { *m = CreateAccountTypeRequest{} }
func (m *CreateAccountTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountTypeRequest) ProtoMessage()               {}
func (*CreateAccountTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CreateAccountTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateAccountTypeRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

func (m *CreateAccountTypeRequest) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

// response parameters for method create_account_type
type CreateAccountTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *CreateAccountTypeResponse) Reset()                    { *m = CreateAccountTypeResponse{} }
func (m *CreateAccountTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountTypeResponse) ProtoMessage()               {}
func (*CreateAccountTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateAccountTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateAccountTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateAccountTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_account_type
type UpdateAccountTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// general ledger account type
	AccountType string `protobuf:"bytes,4,opt,name=account_type,json=accountType" json:"account_type,omitempty"`
}

func (m *UpdateAccountTypeRequest) Reset()                    { *m = UpdateAccountTypeRequest{} }
func (m *UpdateAccountTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountTypeRequest) ProtoMessage()               {}
func (*UpdateAccountTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UpdateAccountTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateAccountTypeRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

func (m *UpdateAccountTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountTypeRequest) GetAccountType() string {
	if m != nil {
		return m.AccountType
	}
	return ""
}

// response parameters for method update_account_type
type UpdateAccountTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountTypeResponse) Reset()                    { *m = UpdateAccountTypeResponse{} }
func (m *UpdateAccountTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountTypeResponse) ProtoMessage()               {}
func (*UpdateAccountTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *UpdateAccountTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_account_type
type DeleteAccountTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountTypeRequest) Reset()                    { *m = DeleteAccountTypeRequest{} }
func (m *DeleteAccountTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountTypeRequest) ProtoMessage()               {}
func (*DeleteAccountTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteAccountTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteAccountTypeRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

func (m *DeleteAccountTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_account_type
type DeleteAccountTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountTypeResponse) Reset()                    { *m = DeleteAccountTypeResponse{} }
func (m *DeleteAccountTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountTypeResponse) ProtoMessage()               {}
func (*DeleteAccountTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeleteAccountTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteAccountTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteAccountTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_account_type_by_id
type GetAccountTypeByIdRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,2,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
}

func (m *GetAccountTypeByIdRequest) Reset()                    { *m = GetAccountTypeByIdRequest{} }
func (m *GetAccountTypeByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountTypeByIdRequest) ProtoMessage()               {}
func (*GetAccountTypeByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetAccountTypeByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetAccountTypeByIdRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

// response parameters for method get_account_type_by_id
type GetAccountTypeByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger account type object
	GlAccountType *GLAccountType `protobuf:"bytes,3,opt,name=gl_account_type,json=glAccountType" json:"gl_account_type,omitempty"`
}

func (m *GetAccountTypeByIdResponse) Reset()                    { *m = GetAccountTypeByIdResponse{} }
func (m *GetAccountTypeByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountTypeByIdResponse) ProtoMessage()               {}
func (*GetAccountTypeByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetAccountTypeByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountTypeByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountTypeByIdResponse) GetGlAccountType() *GLAccountType {
	if m != nil {
		return m.GlAccountType
	}
	return nil
}

// request parameters for method get_account_types_by_mservice
type GetAccountTypesByMserviceRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetAccountTypesByMserviceRequest) Reset()         { *m = GetAccountTypesByMserviceRequest{} }
func (m *GetAccountTypesByMserviceRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountTypesByMserviceRequest) ProtoMessage()    {}
func (*GetAccountTypesByMserviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *GetAccountTypesByMserviceRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_account_types_by_mservice
type GetAccountTypesByMserviceResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger account type objects
	GlAccountTypes []*GLAccountType `protobuf:"bytes,3,rep,name=gl_account_types,json=glAccountTypes" json:"gl_account_types,omitempty"`
}

func (m *GetAccountTypesByMserviceResponse) Reset()         { *m = GetAccountTypesByMserviceResponse{} }
func (m *GetAccountTypesByMserviceResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountTypesByMserviceResponse) ProtoMessage()    {}
func (*GetAccountTypesByMserviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *GetAccountTypesByMserviceResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountTypesByMserviceResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountTypesByMserviceResponse) GetGlAccountTypes() []*GLAccountType {
	if m != nil {
		return m.GlAccountTypes
	}
	return nil
}

// request parameters for method create_transaction_type
type CreateTransactionTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,2,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// transaction type description
	TransactionType string `protobuf:"bytes,3,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
}

func (m *CreateTransactionTypeRequest) Reset()                    { *m = CreateTransactionTypeRequest{} }
func (m *CreateTransactionTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionTypeRequest) ProtoMessage()               {}
func (*CreateTransactionTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CreateTransactionTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateTransactionTypeRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *CreateTransactionTypeRequest) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

// response parameters for method create_transaction_type
type CreateTransactionTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *CreateTransactionTypeResponse) Reset()                    { *m = CreateTransactionTypeResponse{} }
func (m *CreateTransactionTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionTypeResponse) ProtoMessage()               {}
func (*CreateTransactionTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateTransactionTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateTransactionTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateTransactionTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_transaction_type
type UpdateTransactionTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,2,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// transaction type description
	TransactionType string `protobuf:"bytes,4,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
}

func (m *UpdateTransactionTypeRequest) Reset()                    { *m = UpdateTransactionTypeRequest{} }
func (m *UpdateTransactionTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTransactionTypeRequest) ProtoMessage()               {}
func (*UpdateTransactionTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpdateTransactionTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateTransactionTypeRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *UpdateTransactionTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateTransactionTypeRequest) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

// response parameters for method update_transaction_type
type UpdateTransactionTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateTransactionTypeResponse) Reset()                    { *m = UpdateTransactionTypeResponse{} }
func (m *UpdateTransactionTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTransactionTypeResponse) ProtoMessage()               {}
func (*UpdateTransactionTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UpdateTransactionTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateTransactionTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateTransactionTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_transaction_type
type DeleteTransactionTypeRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,2,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTransactionTypeRequest) Reset()                    { *m = DeleteTransactionTypeRequest{} }
func (m *DeleteTransactionTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTransactionTypeRequest) ProtoMessage()               {}
func (*DeleteTransactionTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteTransactionTypeRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteTransactionTypeRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *DeleteTransactionTypeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_transaction_type
type DeleteTransactionTypeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTransactionTypeResponse) Reset()                    { *m = DeleteTransactionTypeResponse{} }
func (m *DeleteTransactionTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTransactionTypeResponse) ProtoMessage()               {}
func (*DeleteTransactionTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DeleteTransactionTypeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteTransactionTypeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteTransactionTypeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_transaction_type_by_id
type GetTransactionTypeByIdRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,2,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
}

func (m *GetTransactionTypeByIdRequest) Reset()                    { *m = GetTransactionTypeByIdRequest{} }
func (m *GetTransactionTypeByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionTypeByIdRequest) ProtoMessage()               {}
func (*GetTransactionTypeByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetTransactionTypeByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTransactionTypeByIdRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

// response parameters for method get_transaction_type_by_id
type GetTransactionTypeByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger transaction type object
	GlTransactionType *GLTransactionType `protobuf:"bytes,3,opt,name=gl_transaction_type,json=glTransactionType" json:"gl_transaction_type,omitempty"`
}

func (m *GetTransactionTypeByIdResponse) Reset()                    { *m = GetTransactionTypeByIdResponse{} }
func (m *GetTransactionTypeByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionTypeByIdResponse) ProtoMessage()               {}
func (*GetTransactionTypeByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetTransactionTypeByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTransactionTypeByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTransactionTypeByIdResponse) GetGlTransactionType() *GLTransactionType {
	if m != nil {
		return m.GlTransactionType
	}
	return nil
}

// request parameters for method get_transaction_types_by_mservice
type GetTransactionTypesByMserviceRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetTransactionTypesByMserviceRequest) Reset()         { *m = GetTransactionTypesByMserviceRequest{} }
func (m *GetTransactionTypesByMserviceRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionTypesByMserviceRequest) ProtoMessage()    {}
func (*GetTransactionTypesByMserviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *GetTransactionTypesByMserviceRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_transaction_types_by_mservice
type GetTransactionTypesByMserviceResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger transaction type objects
	GlTransactionTypes []*GLTransactionType `protobuf:"bytes,3,rep,name=gl_transaction_types,json=glTransactionTypes" json:"gl_transaction_types,omitempty"`
}

func (m *GetTransactionTypesByMserviceResponse) Reset()         { *m = GetTransactionTypesByMserviceResponse{} }
func (m *GetTransactionTypesByMserviceResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionTypesByMserviceResponse) ProtoMessage()    {}
func (*GetTransactionTypesByMserviceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{37}
}

func (m *GetTransactionTypesByMserviceResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTransactionTypesByMserviceResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTransactionTypesByMserviceResponse) GetGlTransactionTypes() []*GLTransactionType {
	if m != nil {
		return m.GlTransactionTypes
	}
	return nil
}

// request parameters for method create_party
type CreatePartyRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// transaction party identifier
	PartyId int64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	// transaction party name
	PartyName string `protobuf:"bytes,3,opt,name=party_name,json=partyName" json:"party_name,omitempty"`
}

func (m *CreatePartyRequest) Reset()                    { *m = CreatePartyRequest{} }
func (m *CreatePartyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePartyRequest) ProtoMessage()               {}
func (*CreatePartyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *CreatePartyRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreatePartyRequest) GetPartyId() int64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

func (m *CreatePartyRequest) GetPartyName() string {
	if m != nil {
		return m.PartyName
	}
	return ""
}

// response parameters for method create_party
type CreatePartyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *CreatePartyResponse) Reset()                    { *m = CreatePartyResponse{} }
func (m *CreatePartyResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePartyResponse) ProtoMessage()               {}
func (*CreatePartyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *CreatePartyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreatePartyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreatePartyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_party
type UpdatePartyRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// transaction party identifier
	PartyId int64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// transaction party name
	PartyName string `protobuf:"bytes,4,opt,name=party_name,json=partyName" json:"party_name,omitempty"`
}

func (m *UpdatePartyRequest) Reset()                    { *m = UpdatePartyRequest{} }
func (m *UpdatePartyRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePartyRequest) ProtoMessage()               {}
func (*UpdatePartyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *UpdatePartyRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdatePartyRequest) GetPartyId() int64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

func (m *UpdatePartyRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdatePartyRequest) GetPartyName() string {
	if m != nil {
		return m.PartyName
	}
	return ""
}

// response parameters for method update_party
type UpdatePartyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdatePartyResponse) Reset()                    { *m = UpdatePartyResponse{} }
func (m *UpdatePartyResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdatePartyResponse) ProtoMessage()               {}
func (*UpdatePartyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *UpdatePartyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdatePartyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdatePartyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_party
type DeletePartyRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// transaction party identifier
	PartyId int64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeletePartyRequest) Reset()                    { *m = DeletePartyRequest{} }
func (m *DeletePartyRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePartyRequest) ProtoMessage()               {}
func (*DeletePartyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DeletePartyRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeletePartyRequest) GetPartyId() int64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

func (m *DeletePartyRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_party
type DeletePartyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeletePartyResponse) Reset()                    { *m = DeletePartyResponse{} }
func (m *DeletePartyResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePartyResponse) ProtoMessage()               {}
func (*DeletePartyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *DeletePartyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeletePartyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeletePartyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_party_by_id
type GetPartyByIdRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// transaction party identifier
	PartyId int64 `protobuf:"varint,2,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
}

func (m *GetPartyByIdRequest) Reset()                    { *m = GetPartyByIdRequest{} }
func (m *GetPartyByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPartyByIdRequest) ProtoMessage()               {}
func (*GetPartyByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *GetPartyByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetPartyByIdRequest) GetPartyId() int64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

// response parameters for method get_party_by_id
type GetPartyByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger transaction party object
	GlParty *GLParty `protobuf:"bytes,3,opt,name=gl_party,json=glParty" json:"gl_party,omitempty"`
}

func (m *GetPartyByIdResponse) Reset()                    { *m = GetPartyByIdResponse{} }
func (m *GetPartyByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPartyByIdResponse) ProtoMessage()               {}
func (*GetPartyByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *GetPartyByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetPartyByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetPartyByIdResponse) GetGlParty() *GLParty {
	if m != nil {
		return m.GlParty
	}
	return nil
}

// request parameters for method get_parties_by_mservice
type GetPartiesByMserviceRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetPartiesByMserviceRequest) Reset()                    { *m = GetPartiesByMserviceRequest{} }
func (m *GetPartiesByMserviceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPartiesByMserviceRequest) ProtoMessage()               {}
func (*GetPartiesByMserviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetPartiesByMserviceRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_parties_by_mservice
type GetPartiesByMserviceResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger transaction party objects
	GlParties []*GLParty `protobuf:"bytes,3,rep,name=gl_parties,json=glParties" json:"gl_parties,omitempty"`
}

func (m *GetPartiesByMserviceResponse) Reset()                    { *m = GetPartiesByMserviceResponse{} }
func (m *GetPartiesByMserviceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPartiesByMserviceResponse) ProtoMessage()               {}
func (*GetPartiesByMserviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *GetPartiesByMserviceResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetPartiesByMserviceResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetPartiesByMserviceResponse) GetGlParties() []*GLParty {
	if m != nil {
		return m.GlParties
	}
	return nil
}

// request parameters for method create_account
type CreateAccountRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// general ledger account name
	AccountName string `protobuf:"bytes,3,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// general ledger account description
	AccountDescription string `protobuf:"bytes,4,opt,name=account_description,json=accountDescription" json:"account_description,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,5,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
}

func (m *CreateAccountRequest) Reset()                    { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()               {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CreateAccountRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateAccountRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *CreateAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountDescription() string {
	if m != nil {
		return m.AccountDescription
	}
	return ""
}

func (m *CreateAccountRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

// response parameters for method create_account
type CreateAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,3,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (m *CreateAccountResponse) Reset()                    { *m = CreateAccountResponse{} }
func (m *CreateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAccountResponse) ProtoMessage()               {}
func (*CreateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *CreateAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateAccountResponse) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *CreateAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_account
type UpdateAccountRequest struct {
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,1,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// general ledger account name
	AccountName string `protobuf:"bytes,4,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// general ledger account description
	AccountDescription string `protobuf:"bytes,5,opt,name=account_description,json=accountDescription" json:"account_description,omitempty"`
	// general ledger account type identifier
	AccountTypeId int32 `protobuf:"varint,6,opt,name=account_type_id,json=accountTypeId" json:"account_type_id,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UpdateAccountRequest) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *UpdateAccountRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateAccountRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *UpdateAccountRequest) GetAccountDescription() string {
	if m != nil {
		return m.AccountDescription
	}
	return ""
}

func (m *UpdateAccountRequest) GetAccountTypeId() int32 {
	if m != nil {
		return m.AccountTypeId
	}
	return 0
}

// response parameters for method update_account
type UpdateAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateAccountResponse) Reset()                    { *m = UpdateAccountResponse{} }
func (m *UpdateAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountResponse) ProtoMessage()               {}
func (*UpdateAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UpdateAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_account
type DeleteAccountRequest struct {
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,1,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountRequest) Reset()                    { *m = DeleteAccountRequest{} }
func (m *DeleteAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountRequest) ProtoMessage()               {}
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *DeleteAccountRequest) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *DeleteAccountRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteAccountRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_account
type DeleteAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteAccountResponse) Reset()                    { *m = DeleteAccountResponse{} }
func (m *DeleteAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAccountResponse) ProtoMessage()               {}
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *DeleteAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteAccountResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_account_by_id
type GetAccountByIdRequest struct {
	// general ledger account unique identifier
	GlAccountId *dml.Guid `protobuf:"bytes,1,opt,name=gl_account_id,json=glAccountId" json:"gl_account_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetAccountByIdRequest) Reset()                    { *m = GetAccountByIdRequest{} }
func (m *GetAccountByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByIdRequest) ProtoMessage()               {}
func (*GetAccountByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *GetAccountByIdRequest) GetGlAccountId() *dml.Guid {
	if m != nil {
		return m.GlAccountId
	}
	return nil
}

func (m *GetAccountByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_account_by_id
type GetAccountByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger account object
	GlAccount *GLAccount `protobuf:"bytes,3,opt,name=gl_account,json=glAccount" json:"gl_account,omitempty"`
}

func (m *GetAccountByIdResponse) Reset()                    { *m = GetAccountByIdResponse{} }
func (m *GetAccountByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAccountByIdResponse) ProtoMessage()               {}
func (*GetAccountByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *GetAccountByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountByIdResponse) GetGlAccount() *GLAccount {
	if m != nil {
		return m.GlAccount
	}
	return nil
}

// request parameters for method get_accounts_by_organization
type GetAccountsByOrganizationRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
}

func (m *GetAccountsByOrganizationRequest) Reset()         { *m = GetAccountsByOrganizationRequest{} }
func (m *GetAccountsByOrganizationRequest) String() string { return proto.CompactTextString(m) }
func (*GetAccountsByOrganizationRequest) ProtoMessage()    {}
func (*GetAccountsByOrganizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{56}
}

func (m *GetAccountsByOrganizationRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetAccountsByOrganizationRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

// response parameters for method get_accounts_by_organization
type GetAccountsByOrganizationResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger account objects
	GlAccounts []*GLAccount `protobuf:"bytes,3,rep,name=gl_accounts,json=glAccounts" json:"gl_accounts,omitempty"`
}

func (m *GetAccountsByOrganizationResponse) Reset()         { *m = GetAccountsByOrganizationResponse{} }
func (m *GetAccountsByOrganizationResponse) String() string { return proto.CompactTextString(m) }
func (*GetAccountsByOrganizationResponse) ProtoMessage()    {}
func (*GetAccountsByOrganizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{57}
}

func (m *GetAccountsByOrganizationResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetAccountsByOrganizationResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetAccountsByOrganizationResponse) GetGlAccounts() []*GLAccount {
	if m != nil {
		return m.GlAccounts
	}
	return nil
}

// request parameters for method create_transaction
type CreateTransactionRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// transaction date
	TransactionDate *dml.DateTime `protobuf:"bytes,3,opt,name=transaction_date,json=transactionDate" json:"transaction_date,omitempty"`
	// transaction description
	TransactionDescription string `protobuf:"bytes,4,opt,name=transaction_description,json=transactionDescription" json:"transaction_description,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,5,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// identifier of transaction from party
	FromPartyId int64 `protobuf:"varint,6,opt,name=from_party_id,json=fromPartyId" json:"from_party_id,omitempty"`
	// identifier of transaction to party
	ToPartyId int64 `protobuf:"varint,7,opt,name=to_party_id,json=toPartyId" json:"to_party_id,omitempty"`
	// associated key from external system
	PostedViaKey string `protobuf:"bytes,8,opt,name=posted_via_key,json=postedViaKey" json:"posted_via_key,omitempty"`
	// date posted on external system
	PostedViaDate *dml.DateTime `protobuf:"bytes,9,opt,name=posted_via_date,json=postedViaDate" json:"posted_via_date,omitempty"`
}

func (m *CreateTransactionRequest) Reset()                    { *m = CreateTransactionRequest{} }
func (m *CreateTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionRequest) ProtoMessage()               {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CreateTransactionRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *CreateTransactionRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *CreateTransactionRequest) GetTransactionDate() *dml.DateTime {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *CreateTransactionRequest) GetTransactionDescription() string {
	if m != nil {
		return m.TransactionDescription
	}
	return ""
}

func (m *CreateTransactionRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *CreateTransactionRequest) GetFromPartyId() int64 {
	if m != nil {
		return m.FromPartyId
	}
	return 0
}

func (m *CreateTransactionRequest) GetToPartyId() int64 {
	if m != nil {
		return m.ToPartyId
	}
	return 0
}

func (m *CreateTransactionRequest) GetPostedViaKey() string {
	if m != nil {
		return m.PostedViaKey
	}
	return ""
}

func (m *CreateTransactionRequest) GetPostedViaDate() *dml.DateTime {
	if m != nil {
		return m.PostedViaDate
	}
	return nil
}

// response parameters for method create_transaction
type CreateTransactionResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,3,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
}

func (m *CreateTransactionResponse) Reset()                    { *m = CreateTransactionResponse{} }
func (m *CreateTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionResponse) ProtoMessage()               {}
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *CreateTransactionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateTransactionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateTransactionResponse) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *CreateTransactionResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method update_transaction
type UpdateTransactionRequest struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// transaction date
	TransactionDate *dml.DateTime `protobuf:"bytes,4,opt,name=transaction_date,json=transactionDate" json:"transaction_date,omitempty"`
	// transaction description
	TransactionDescription string `protobuf:"bytes,5,opt,name=transaction_description,json=transactionDescription" json:"transaction_description,omitempty"`
	// general ledger transaction type identifier
	TransactionTypeId int32 `protobuf:"varint,6,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	// identifier of transaction from party
	FromPartyId int64 `protobuf:"varint,7,opt,name=from_party_id,json=fromPartyId" json:"from_party_id,omitempty"`
	// identifier of transaction to party
	ToPartyId int64 `protobuf:"varint,8,opt,name=to_party_id,json=toPartyId" json:"to_party_id,omitempty"`
	// associated key from external system
	PostedViaKey string `protobuf:"bytes,9,opt,name=posted_via_key,json=postedViaKey" json:"posted_via_key,omitempty"`
	// date posted on external system
	PostedViaDate *dml.DateTime `protobuf:"bytes,10,opt,name=posted_via_date,json=postedViaDate" json:"posted_via_date,omitempty"`
}

func (m *UpdateTransactionRequest) Reset()                    { *m = UpdateTransactionRequest{} }
func (m *UpdateTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTransactionRequest) ProtoMessage()               {}
func (*UpdateTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *UpdateTransactionRequest) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *UpdateTransactionRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *UpdateTransactionRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UpdateTransactionRequest) GetTransactionDate() *dml.DateTime {
	if m != nil {
		return m.TransactionDate
	}
	return nil
}

func (m *UpdateTransactionRequest) GetTransactionDescription() string {
	if m != nil {
		return m.TransactionDescription
	}
	return ""
}

func (m *UpdateTransactionRequest) GetTransactionTypeId() int32 {
	if m != nil {
		return m.TransactionTypeId
	}
	return 0
}

func (m *UpdateTransactionRequest) GetFromPartyId() int64 {
	if m != nil {
		return m.FromPartyId
	}
	return 0
}

func (m *UpdateTransactionRequest) GetToPartyId() int64 {
	if m != nil {
		return m.ToPartyId
	}
	return 0
}

func (m *UpdateTransactionRequest) GetPostedViaKey() string {
	if m != nil {
		return m.PostedViaKey
	}
	return ""
}

func (m *UpdateTransactionRequest) GetPostedViaDate() *dml.DateTime {
	if m != nil {
		return m.PostedViaDate
	}
	return nil
}

// response parameters for method update_transaction
type UpdateTransactionResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *UpdateTransactionResponse) Reset()                    { *m = UpdateTransactionResponse{} }
func (m *UpdateTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTransactionResponse) ProtoMessage()               {}
func (*UpdateTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *UpdateTransactionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *UpdateTransactionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *UpdateTransactionResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method delete_transaction
type DeleteTransactionRequest struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTransactionRequest) Reset()                    { *m = DeleteTransactionRequest{} }
func (m *DeleteTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTransactionRequest) ProtoMessage()               {}
func (*DeleteTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *DeleteTransactionRequest) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *DeleteTransactionRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *DeleteTransactionRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_transaction
type DeleteTransactionResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteTransactionResponse) Reset()                    { *m = DeleteTransactionResponse{} }
func (m *DeleteTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteTransactionResponse) ProtoMessage()               {}
func (*DeleteTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *DeleteTransactionResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteTransactionResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteTransactionResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_transaction_by_id
type GetTransactionByIdRequest struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetTransactionByIdRequest) Reset()                    { *m = GetTransactionByIdRequest{} }
func (m *GetTransactionByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionByIdRequest) ProtoMessage()               {}
func (*GetTransactionByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *GetTransactionByIdRequest) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *GetTransactionByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_transaction_by_id
type GetTransactionByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger transaction object
	GlTransaction *GLTransaction `protobuf:"bytes,3,opt,name=gl_transaction,json=glTransaction" json:"gl_transaction,omitempty"`
}

func (m *GetTransactionByIdResponse) Reset()                    { *m = GetTransactionByIdResponse{} }
func (m *GetTransactionByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionByIdResponse) ProtoMessage()               {}
func (*GetTransactionByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *GetTransactionByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTransactionByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTransactionByIdResponse) GetGlTransaction() *GLTransaction {
	if m != nil {
		return m.GlTransaction
	}
	return nil
}

// request parameters for method get_transaction_wrapper_by_id
type GetTransactionWrapperByIdRequest struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
}

func (m *GetTransactionWrapperByIdRequest) Reset()         { *m = GetTransactionWrapperByIdRequest{} }
func (m *GetTransactionWrapperByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionWrapperByIdRequest) ProtoMessage()    {}
func (*GetTransactionWrapperByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{66}
}

func (m *GetTransactionWrapperByIdRequest) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *GetTransactionWrapperByIdRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

// response parameters for method get_transaction_wrapper_by_id
type GetTransactionWrapperByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// general ledger transaction object with transaction details
	GlTransactionWrapper *GLTransactionWrapper `protobuf:"bytes,3,opt,name=gl_transaction_wrapper,json=glTransactionWrapper" json:"gl_transaction_wrapper,omitempty"`
}

func (m *GetTransactionWrapperByIdResponse) Reset()         { *m = GetTransactionWrapperByIdResponse{} }
func (m *GetTransactionWrapperByIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionWrapperByIdResponse) ProtoMessage()    {}
func (*GetTransactionWrapperByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{67}
}

func (m *GetTransactionWrapperByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTransactionWrapperByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTransactionWrapperByIdResponse) GetGlTransactionWrapper() *GLTransactionWrapper {
	if m != nil {
		return m.GlTransactionWrapper
	}
	return nil
}

// request parameters for method get_transaction_wrappers_by_date
type GetTransactionWrappersByDateRequest struct {
	// MService account id
	MserviceId int64 `protobuf:"varint,1,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// organization unique identifier
	OrganizationId *dml.Guid `protobuf:"bytes,2,opt,name=organization_id,json=organizationId" json:"organization_id,omitempty"`
	// start date for search
	StartDate *dml.DateTime `protobuf:"bytes,3,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	// end date for search
	EndDate *dml.DateTime `protobuf:"bytes,4,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *GetTransactionWrappersByDateRequest) Reset()         { *m = GetTransactionWrappersByDateRequest{} }
func (m *GetTransactionWrappersByDateRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionWrappersByDateRequest) ProtoMessage()    {}
func (*GetTransactionWrappersByDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{68}
}

func (m *GetTransactionWrappersByDateRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *GetTransactionWrappersByDateRequest) GetOrganizationId() *dml.Guid {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *GetTransactionWrappersByDateRequest) GetStartDate() *dml.DateTime {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *GetTransactionWrappersByDateRequest) GetEndDate() *dml.DateTime {
	if m != nil {
		return m.EndDate
	}
	return nil
}

// response parameters for method get_transaction_wrappers_by_date
type GetTransactionWrappersByDateResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of general ledger transaction objects with transaction details
	GlTransactionWrappers []*GLTransactionWrapper `protobuf:"bytes,3,rep,name=gl_transaction_wrappers,json=glTransactionWrappers" json:"gl_transaction_wrappers,omitempty"`
}

func (m *GetTransactionWrappersByDateResponse) Reset()         { *m = GetTransactionWrappersByDateResponse{} }
func (m *GetTransactionWrappersByDateResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionWrappersByDateResponse) ProtoMessage()    {}
func (*GetTransactionWrappersByDateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{69}
}

func (m *GetTransactionWrappersByDateResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetTransactionWrappersByDateResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetTransactionWrappersByDateResponse) GetGlTransactionWrappers() []*GLTransactionWrapper {
	if m != nil {
		return m.GlTransactionWrappers
	}
	return nil
}

// request parameters for method add_transaction_details
type AddTransactionDetailsRequest struct {
	// general ledger transaction unique identifier
	GlTransactionId int64 `protobuf:"varint,1,opt,name=gl_transaction_id,json=glTransactionId" json:"gl_transaction_id,omitempty"`
	// MService account id
	MserviceId int64 `protobuf:"varint,2,opt,name=mservice_id,json=mserviceId" json:"mservice_id,omitempty"`
	// list of general ledger transaction detail objects
	GlTransactionDetails []*GLTransactionDetail `protobuf:"bytes,3,rep,name=gl_transaction_details,json=glTransactionDetails" json:"gl_transaction_details,omitempty"`
}

func (m *AddTransactionDetailsRequest) Reset()                    { *m = AddTransactionDetailsRequest{} }
func (m *AddTransactionDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionDetailsRequest) ProtoMessage()               {}
func (*AddTransactionDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *AddTransactionDetailsRequest) GetGlTransactionId() int64 {
	if m != nil {
		return m.GlTransactionId
	}
	return 0
}

func (m *AddTransactionDetailsRequest) GetMserviceId() int64 {
	if m != nil {
		return m.MserviceId
	}
	return 0
}

func (m *AddTransactionDetailsRequest) GetGlTransactionDetails() []*GLTransactionDetail {
	if m != nil {
		return m.GlTransactionDetails
	}
	return nil
}

// response parameters for method add_transaction_details
type AddTransactionDetailsResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *AddTransactionDetailsResponse) Reset()                    { *m = AddTransactionDetailsResponse{} }
func (m *AddTransactionDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionDetailsResponse) ProtoMessage()               {}
func (*AddTransactionDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *AddTransactionDetailsResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddTransactionDetailsResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*GLOrganization)(nil), "org.gaterace.mservice.ledger.GLOrganization")
	proto.RegisterType((*GLAccount)(nil), "org.gaterace.mservice.ledger.GLAccount")
	proto.RegisterType((*GLAccountType)(nil), "org.gaterace.mservice.ledger.GLAccountType")
	proto.RegisterType((*GLTransaction)(nil), "org.gaterace.mservice.ledger.GLTransaction")
	proto.RegisterType((*GLTransactionWrapper)(nil), "org.gaterace.mservice.ledger.GLTransactionWrapper")
	proto.RegisterType((*GLTransactionType)(nil), "org.gaterace.mservice.ledger.GLTransactionType")
	proto.RegisterType((*GLParty)(nil), "org.gaterace.mservice.ledger.GLParty")
	proto.RegisterType((*GLTransactionDetail)(nil), "org.gaterace.mservice.ledger.GLTransactionDetail")
	proto.RegisterType((*CreateOrganizationRequest)(nil), "org.gaterace.mservice.ledger.CreateOrganizationRequest")
	proto.RegisterType((*CreateOrganizationResponse)(nil), "org.gaterace.mservice.ledger.CreateOrganizationResponse")
	proto.RegisterType((*UpdateOrganizationRequest)(nil), "org.gaterace.mservice.ledger.UpdateOrganizationRequest")
	proto.RegisterType((*UpdateOrganizationResponse)(nil), "org.gaterace.mservice.ledger.UpdateOrganizationResponse")
	proto.RegisterType((*DeleteOrganizationRequest)(nil), "org.gaterace.mservice.ledger.DeleteOrganizationRequest")
	proto.RegisterType((*DeleteOrganizationResponse)(nil), "org.gaterace.mservice.ledger.DeleteOrganizationResponse")
	proto.RegisterType((*GetOrganizationByIdRequest)(nil), "org.gaterace.mservice.ledger.GetOrganizationByIdRequest")
	proto.RegisterType((*GetOrganizationByIdResponse)(nil), "org.gaterace.mservice.ledger.GetOrganizationByIdResponse")
	proto.RegisterType((*GetOrganizationsByMserviceRequest)(nil), "org.gaterace.mservice.ledger.GetOrganizationsByMserviceRequest")
	proto.RegisterType((*GetOrganizationsByMserviceResponse)(nil), "org.gaterace.mservice.ledger.GetOrganizationsByMserviceResponse")
	proto.RegisterType((*CreateAccountTypeRequest)(nil), "org.gaterace.mservice.ledger.CreateAccountTypeRequest")
	proto.RegisterType((*CreateAccountTypeResponse)(nil), "org.gaterace.mservice.ledger.CreateAccountTypeResponse")
	proto.RegisterType((*UpdateAccountTypeRequest)(nil), "org.gaterace.mservice.ledger.UpdateAccountTypeRequest")
	proto.RegisterType((*UpdateAccountTypeResponse)(nil), "org.gaterace.mservice.ledger.UpdateAccountTypeResponse")
	proto.RegisterType((*DeleteAccountTypeRequest)(nil), "org.gaterace.mservice.ledger.DeleteAccountTypeRequest")
	proto.RegisterType((*DeleteAccountTypeResponse)(nil), "org.gaterace.mservice.ledger.DeleteAccountTypeResponse")
	proto.RegisterType((*GetAccountTypeByIdRequest)(nil), "org.gaterace.mservice.ledger.GetAccountTypeByIdRequest")
	proto.RegisterType((*GetAccountTypeByIdResponse)(nil), "org.gaterace.mservice.ledger.GetAccountTypeByIdResponse")
	proto.RegisterType((*GetAccountTypesByMserviceRequest)(nil), "org.gaterace.mservice.ledger.GetAccountTypesByMserviceRequest")
	proto.RegisterType((*GetAccountTypesByMserviceResponse)(nil), "org.gaterace.mservice.ledger.GetAccountTypesByMserviceResponse")
	proto.RegisterType((*CreateTransactionTypeRequest)(nil), "org.gaterace.mservice.ledger.CreateTransactionTypeRequest")
	proto.RegisterType((*CreateTransactionTypeResponse)(nil), "org.gaterace.mservice.ledger.CreateTransactionTypeResponse")
	proto.RegisterType((*UpdateTransactionTypeRequest)(nil), "org.gaterace.mservice.ledger.UpdateTransactionTypeRequest")
	proto.RegisterType((*UpdateTransactionTypeResponse)(nil), "org.gaterace.mservice.ledger.UpdateTransactionTypeResponse")
	proto.RegisterType((*DeleteTransactionTypeRequest)(nil), "org.gaterace.mservice.ledger.DeleteTransactionTypeRequest")
	proto.RegisterType((*DeleteTransactionTypeResponse)(nil), "org.gaterace.mservice.ledger.DeleteTransactionTypeResponse")
	proto.RegisterType((*GetTransactionTypeByIdRequest)(nil), "org.gaterace.mservice.ledger.GetTransactionTypeByIdRequest")
	proto.RegisterType((*GetTransactionTypeByIdResponse)(nil), "org.gaterace.mservice.ledger.GetTransactionTypeByIdResponse")
	proto.RegisterType((*GetTransactionTypesByMserviceRequest)(nil), "org.gaterace.mservice.ledger.GetTransactionTypesByMserviceRequest")
	proto.RegisterType((*GetTransactionTypesByMserviceResponse)(nil), "org.gaterace.mservice.ledger.GetTransactionTypesByMserviceResponse")
	proto.RegisterType((*CreatePartyRequest)(nil), "org.gaterace.mservice.ledger.CreatePartyRequest")
	proto.RegisterType((*CreatePartyResponse)(nil), "org.gaterace.mservice.ledger.CreatePartyResponse")
	proto.RegisterType((*UpdatePartyRequest)(nil), "org.gaterace.mservice.ledger.UpdatePartyRequest")
	proto.RegisterType((*UpdatePartyResponse)(nil), "org.gaterace.mservice.ledger.UpdatePartyResponse")
	proto.RegisterType((*DeletePartyRequest)(nil), "org.gaterace.mservice.ledger.DeletePartyRequest")
	proto.RegisterType((*DeletePartyResponse)(nil), "org.gaterace.mservice.ledger.DeletePartyResponse")
	proto.RegisterType((*GetPartyByIdRequest)(nil), "org.gaterace.mservice.ledger.GetPartyByIdRequest")
	proto.RegisterType((*GetPartyByIdResponse)(nil), "org.gaterace.mservice.ledger.GetPartyByIdResponse")
	proto.RegisterType((*GetPartiesByMserviceRequest)(nil), "org.gaterace.mservice.ledger.GetPartiesByMserviceRequest")
	proto.RegisterType((*GetPartiesByMserviceResponse)(nil), "org.gaterace.mservice.ledger.GetPartiesByMserviceResponse")
	proto.RegisterType((*CreateAccountRequest)(nil), "org.gaterace.mservice.ledger.CreateAccountRequest")
	proto.RegisterType((*CreateAccountResponse)(nil), "org.gaterace.mservice.ledger.CreateAccountResponse")
	proto.RegisterType((*UpdateAccountRequest)(nil), "org.gaterace.mservice.ledger.UpdateAccountRequest")
	proto.RegisterType((*UpdateAccountResponse)(nil), "org.gaterace.mservice.ledger.UpdateAccountResponse")
	proto.RegisterType((*DeleteAccountRequest)(nil), "org.gaterace.mservice.ledger.DeleteAccountRequest")
	proto.RegisterType((*DeleteAccountResponse)(nil), "org.gaterace.mservice.ledger.DeleteAccountResponse")
	proto.RegisterType((*GetAccountByIdRequest)(nil), "org.gaterace.mservice.ledger.GetAccountByIdRequest")
	proto.RegisterType((*GetAccountByIdResponse)(nil), "org.gaterace.mservice.ledger.GetAccountByIdResponse")
	proto.RegisterType((*GetAccountsByOrganizationRequest)(nil), "org.gaterace.mservice.ledger.GetAccountsByOrganizationRequest")
	proto.RegisterType((*GetAccountsByOrganizationResponse)(nil), "org.gaterace.mservice.ledger.GetAccountsByOrganizationResponse")
	proto.RegisterType((*CreateTransactionRequest)(nil), "org.gaterace.mservice.ledger.CreateTransactionRequest")
	proto.RegisterType((*CreateTransactionResponse)(nil), "org.gaterace.mservice.ledger.CreateTransactionResponse")
	proto.RegisterType((*UpdateTransactionRequest)(nil), "org.gaterace.mservice.ledger.UpdateTransactionRequest")
	proto.RegisterType((*UpdateTransactionResponse)(nil), "org.gaterace.mservice.ledger.UpdateTransactionResponse")
	proto.RegisterType((*DeleteTransactionRequest)(nil), "org.gaterace.mservice.ledger.DeleteTransactionRequest")
	proto.RegisterType((*DeleteTransactionResponse)(nil), "org.gaterace.mservice.ledger.DeleteTransactionResponse")
	proto.RegisterType((*GetTransactionByIdRequest)(nil), "org.gaterace.mservice.ledger.GetTransactionByIdRequest")
	proto.RegisterType((*GetTransactionByIdResponse)(nil), "org.gaterace.mservice.ledger.GetTransactionByIdResponse")
	proto.RegisterType((*GetTransactionWrapperByIdRequest)(nil), "org.gaterace.mservice.ledger.GetTransactionWrapperByIdRequest")
	proto.RegisterType((*GetTransactionWrapperByIdResponse)(nil), "org.gaterace.mservice.ledger.GetTransactionWrapperByIdResponse")
	proto.RegisterType((*GetTransactionWrappersByDateRequest)(nil), "org.gaterace.mservice.ledger.GetTransactionWrappersByDateRequest")
	proto.RegisterType((*GetTransactionWrappersByDateResponse)(nil), "org.gaterace.mservice.ledger.GetTransactionWrappersByDateResponse")
	proto.RegisterType((*AddTransactionDetailsRequest)(nil), "org.gaterace.mservice.ledger.AddTransactionDetailsRequest")
	proto.RegisterType((*AddTransactionDetailsResponse)(nil), "org.gaterace.mservice.ledger.AddTransactionDetailsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MServiceLedger service

type MServiceLedgerClient interface {
	// create a new general ledger organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// update an existing general ledger organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// delete an existing general ledger organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// get general ledger organization by id
	GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error)
	// get general ledger organizations by mservice
	GetOrganizationsByMservice(ctx context.Context, in *GetOrganizationsByMserviceRequest, opts ...grpc.CallOption) (*GetOrganizationsByMserviceResponse, error)
	// create general ledger account type
	CreateAccountType(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error)
	// update general ledger account type
	UpdateAccountType(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error)
	// delete general ledger account type
	DeleteAccountType(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error)
	// get general ledger account type by id
	GetAccountTypeById(ctx context.Context, in *GetAccountTypeByIdRequest, opts ...grpc.CallOption) (*GetAccountTypeByIdResponse, error)
	// get general ledger account types by mservice
	GetAccountTypesByMservice(ctx context.Context, in *GetAccountTypesByMserviceRequest, opts ...grpc.CallOption) (*GetAccountTypesByMserviceResponse, error)
	// create general ledger transaction type
	CreateTransactionType(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error)
	// update general ledger transaction type
	UpdateTransactionType(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error)
	// delete general ledger transaction type
	DeleteTransactionType(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error)
	// get general ledger transaction type by id
	GetTransactionTypeById(ctx context.Context, in *GetTransactionTypeByIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByIdResponse, error)
	// get general ledger transaction types by mservice
	GetTransactionTypesByMservice(ctx context.Context, in *GetTransactionTypesByMserviceRequest, opts ...grpc.CallOption) (*GetTransactionTypesByMserviceResponse, error)
	// create general ledger party
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	// update general ledger party
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error)
	// delete general ledger party
	DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error)
	// get general ledger party by id
	GetPartyById(ctx context.Context, in *GetPartyByIdRequest, opts ...grpc.CallOption) (*GetPartyByIdResponse, error)
	// get general ledger parties by mservice
	GetPartiesByMservice(ctx context.Context, in *GetPartiesByMserviceRequest, opts ...grpc.CallOption) (*GetPartiesByMserviceResponse, error)
	// create general ledger account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// update general ledger account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete general ledger account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get general ledger account by id
	GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error)
	// get general ledger accounts by organization
	GetAccountsByOrganization(ctx context.Context, in *GetAccountsByOrganizationRequest, opts ...grpc.CallOption) (*GetAccountsByOrganizationResponse, error)
	// create general ledger transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// update general ledger transaction
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	// delete general ledger transaction
	DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error)
	// get general ledger transaction by id
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error)
	// get general ledger transaction wrapper by id
	GetTransactionWrapperById(ctx context.Context, in *GetTransactionWrapperByIdRequest, opts ...grpc.CallOption) (*GetTransactionWrapperByIdResponse, error)
	// get general ledger transaction wrappers by date
	GetTransactionWrappersByDate(ctx context.Context, in *GetTransactionWrappersByDateRequest, opts ...grpc.CallOption) (*GetTransactionWrappersByDateResponse, error)
	// add transaction details
	AddTransactionDetails(ctx context.Context, in *AddTransactionDetailsRequest, opts ...grpc.CallOption) (*AddTransactionDetailsResponse, error)
}

type mServiceLedgerClient struct {
	cc *grpc.ClientConn
}

func NewMServiceLedgerClient(cc *grpc.ClientConn) MServiceLedgerClient {
	return &mServiceLedgerClient{cc}
}

func (c *mServiceLedgerClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_organization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_organization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_organization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error) {
	out := new(GetOrganizationByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_organization_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetOrganizationsByMservice(ctx context.Context, in *GetOrganizationsByMserviceRequest, opts ...grpc.CallOption) (*GetOrganizationsByMserviceResponse, error) {
	out := new(GetOrganizationsByMserviceResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_organizations_by_mservice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateAccountType(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error) {
	out := new(CreateAccountTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_account_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateAccountType(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error) {
	out := new(UpdateAccountTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_account_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteAccountType(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error) {
	out := new(DeleteAccountTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_account_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountTypeById(ctx context.Context, in *GetAccountTypeByIdRequest, opts ...grpc.CallOption) (*GetAccountTypeByIdResponse, error) {
	out := new(GetAccountTypeByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_type_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountTypesByMservice(ctx context.Context, in *GetAccountTypesByMserviceRequest, opts ...grpc.CallOption) (*GetAccountTypesByMserviceResponse, error) {
	out := new(GetAccountTypesByMserviceResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_types_by_mservice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateTransactionType(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error) {
	out := new(CreateTransactionTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateTransactionType(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error) {
	out := new(UpdateTransactionTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteTransactionType(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error) {
	out := new(DeleteTransactionTypeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction_type", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionTypeById(ctx context.Context, in *GetTransactionTypeByIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByIdResponse, error) {
	out := new(GetTransactionTypeByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_type_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionTypesByMservice(ctx context.Context, in *GetTransactionTypesByMserviceRequest, opts ...grpc.CallOption) (*GetTransactionTypesByMserviceResponse, error) {
	out := new(GetTransactionTypesByMserviceResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_types_by_mservice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	out := new(CreatePartyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_party", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error) {
	out := new(UpdatePartyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_party", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error) {
	out := new(DeletePartyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_party", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetPartyById(ctx context.Context, in *GetPartyByIdRequest, opts ...grpc.CallOption) (*GetPartyByIdResponse, error) {
	out := new(GetPartyByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_party_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetPartiesByMservice(ctx context.Context, in *GetPartiesByMserviceRequest, opts ...grpc.CallOption) (*GetPartiesByMserviceResponse, error) {
	out := new(GetPartiesByMserviceResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_parties_by_mservice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error) {
	out := new(GetAccountByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountsByOrganization(ctx context.Context, in *GetAccountsByOrganizationRequest, opts ...grpc.CallOption) (*GetAccountsByOrganizationResponse, error) {
	out := new(GetAccountsByOrganizationResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_accounts_by_organization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	out := new(UpdateTransactionResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error) {
	out := new(DeleteTransactionResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error) {
	out := new(GetTransactionByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionWrapperById(ctx context.Context, in *GetTransactionWrapperByIdRequest, opts ...grpc.CallOption) (*GetTransactionWrapperByIdResponse, error) {
	out := new(GetTransactionWrapperByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrapper_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionWrappersByDate(ctx context.Context, in *GetTransactionWrappersByDateRequest, opts ...grpc.CallOption) (*GetTransactionWrappersByDateResponse, error) {
	out := new(GetTransactionWrappersByDateResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrappers_by_date", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) AddTransactionDetails(ctx context.Context, in *AddTransactionDetailsRequest, opts ...grpc.CallOption) (*AddTransactionDetailsResponse, error) {
	out := new(AddTransactionDetailsResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/add_transaction_details", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MServiceLedger service

type MServiceLedgerServer interface {
	// create a new general ledger organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// update an existing general ledger organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// delete an existing general ledger organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// get general ledger organization by id
	GetOrganizationById(context.Context, *GetOrganizationByIdRequest) (*GetOrganizationByIdResponse, error)
	// get general ledger organizations by mservice
	GetOrganizationsByMservice(context.Context, *GetOrganizationsByMserviceRequest) (*GetOrganizationsByMserviceResponse, error)
	// create general ledger account type
	CreateAccountType(context.Context, *CreateAccountTypeRequest) (*CreateAccountTypeResponse, error)
	// update general ledger account type
	UpdateAccountType(context.Context, *UpdateAccountTypeRequest) (*UpdateAccountTypeResponse, error)
	// delete general ledger account type
	DeleteAccountType(context.Context, *DeleteAccountTypeRequest) (*DeleteAccountTypeResponse, error)
	// get general ledger account type by id
	GetAccountTypeById(context.Context, *GetAccountTypeByIdRequest) (*GetAccountTypeByIdResponse, error)
	// get general ledger account types by mservice
	GetAccountTypesByMservice(context.Context, *GetAccountTypesByMserviceRequest) (*GetAccountTypesByMserviceResponse, error)
	// create general ledger transaction type
	CreateTransactionType(context.Context, *CreateTransactionTypeRequest) (*CreateTransactionTypeResponse, error)
	// update general ledger transaction type
	UpdateTransactionType(context.Context, *UpdateTransactionTypeRequest) (*UpdateTransactionTypeResponse, error)
	// delete general ledger transaction type
	DeleteTransactionType(context.Context, *DeleteTransactionTypeRequest) (*DeleteTransactionTypeResponse, error)
	// get general ledger transaction type by id
	GetTransactionTypeById(context.Context, *GetTransactionTypeByIdRequest) (*GetTransactionTypeByIdResponse, error)
	// get general ledger transaction types by mservice
	GetTransactionTypesByMservice(context.Context, *GetTransactionTypesByMserviceRequest) (*GetTransactionTypesByMserviceResponse, error)
	// create general ledger party
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	// update general ledger party
	UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error)
	// delete general ledger party
	DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error)
	// get general ledger party by id
	GetPartyById(context.Context, *GetPartyByIdRequest) (*GetPartyByIdResponse, error)
	// get general ledger parties by mservice
	GetPartiesByMservice(context.Context, *GetPartiesByMserviceRequest) (*GetPartiesByMserviceResponse, error)
	// create general ledger account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// update general ledger account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete general ledger account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get general ledger account by id
	GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error)
	// get general ledger accounts by organization
	GetAccountsByOrganization(context.Context, *GetAccountsByOrganizationRequest) (*GetAccountsByOrganizationResponse, error)
	// create general ledger transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// update general ledger transaction
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	// delete general ledger transaction
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error)
	// get general ledger transaction by id
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error)
	// get general ledger transaction wrapper by id
	GetTransactionWrapperById(context.Context, *GetTransactionWrapperByIdRequest) (*GetTransactionWrapperByIdResponse, error)
	// get general ledger transaction wrappers by date
	GetTransactionWrappersByDate(context.Context, *GetTransactionWrappersByDateRequest) (*GetTransactionWrappersByDateResponse, error)
	// add transaction details
	AddTransactionDetails(context.Context, *AddTransactionDetailsRequest) (*AddTransactionDetailsResponse, error)
}

func RegisterMServiceLedgerServer(s *grpc.Server, srv MServiceLedgerServer) {
	s.RegisterService(&_MServiceLedger_serviceDesc, srv)
}

func _MServiceLedger_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetOrganizationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetOrganizationById(ctx, req.(*GetOrganizationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetOrganizationsByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetOrganizationsByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetOrganizationsByMservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetOrganizationsByMservice(ctx, req.(*GetOrganizationsByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateAccountType(ctx, req.(*CreateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateAccountType(ctx, req.(*UpdateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteAccountType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteAccountType(ctx, req.(*DeleteAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetAccountTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountTypeById(ctx, req.(*GetAccountTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountTypesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTypesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountTypesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetAccountTypesByMservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountTypesByMservice(ctx, req.(*GetAccountTypesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateTransactionType(ctx, req.(*CreateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateTransactionType(ctx, req.(*UpdateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteTransactionType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteTransactionType(ctx, req.(*DeleteTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetTransactionTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionTypeById(ctx, req.(*GetTransactionTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionTypesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionTypesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetTransactionTypesByMservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionTypesByMservice(ctx, req.(*GetTransactionTypesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteParty(ctx, req.(*DeletePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetPartyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetPartyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetPartyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetPartyById(ctx, req.(*GetPartyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetPartiesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetPartiesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetPartiesByMservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetPartiesByMservice(ctx, req.(*GetPartiesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountById(ctx, req.(*GetAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetAccountsByOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountsByOrganization(ctx, req.(*GetAccountsByOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/UpdateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/DeleteTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetTransactionWrapperById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionWrapperById(ctx, req.(*GetTransactionWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionWrappersByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionWrappersByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionWrappersByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/GetTransactionWrappersByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionWrappersByDate(ctx, req.(*GetTransactionWrappersByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_AddTransactionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).AddTransactionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/AddTransactionDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).AddTransactionDetails(ctx, req.(*AddTransactionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MServiceLedger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.ledger.MServiceLedger",
	HandlerType: (*MServiceLedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_organization",
			Handler:    _MServiceLedger_CreateOrganization_Handler,
		},
		{
			MethodName: "update_organization",
			Handler:    _MServiceLedger_UpdateOrganization_Handler,
		},
		{
			MethodName: "delete_organization",
			Handler:    _MServiceLedger_DeleteOrganization_Handler,
		},
		{
			MethodName: "get_organization_by_id",
			Handler:    _MServiceLedger_GetOrganizationById_Handler,
		},
		{
			MethodName: "get_organizations_by_mservice",
			Handler:    _MServiceLedger_GetOrganizationsByMservice_Handler,
		},
		{
			MethodName: "create_account_type",
			Handler:    _MServiceLedger_CreateAccountType_Handler,
		},
		{
			MethodName: "update_account_type",
			Handler:    _MServiceLedger_UpdateAccountType_Handler,
		},
		{
			MethodName: "delete_account_type",
			Handler:    _MServiceLedger_DeleteAccountType_Handler,
		},
		{
			MethodName: "get_account_type_by_id",
			Handler:    _MServiceLedger_GetAccountTypeById_Handler,
		},
		{
			MethodName: "get_account_types_by_mservice",
			Handler:    _MServiceLedger_GetAccountTypesByMservice_Handler,
		},
		{
			MethodName: "create_transaction_type",
			Handler:    _MServiceLedger_CreateTransactionType_Handler,
		},
		{
			MethodName: "update_transaction_type",
			Handler:    _MServiceLedger_UpdateTransactionType_Handler,
		},
		{
			MethodName: "delete_transaction_type",
			Handler:    _MServiceLedger_DeleteTransactionType_Handler,
		},
		{
			MethodName: "get_transaction_type_by_id",
			Handler:    _MServiceLedger_GetTransactionTypeById_Handler,
		},
		{
			MethodName: "get_transaction_types_by_mservice",
			Handler:    _MServiceLedger_GetTransactionTypesByMservice_Handler,
		},
		{
			MethodName: "create_party",
			Handler:    _MServiceLedger_CreateParty_Handler,
		},
		{
			MethodName: "update_party",
			Handler:    _MServiceLedger_UpdateParty_Handler,
		},
		{
			MethodName: "delete_party",
			Handler:    _MServiceLedger_DeleteParty_Handler,
		},
		{
			MethodName: "get_party_by_id",
			Handler:    _MServiceLedger_GetPartyById_Handler,
		},
		{
			MethodName: "get_parties_by_mservice",
			Handler:    _MServiceLedger_GetPartiesByMservice_Handler,
		},
		{
			MethodName: "create_account",
			Handler:    _MServiceLedger_CreateAccount_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _MServiceLedger_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account",
			Handler:    _MServiceLedger_DeleteAccount_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _MServiceLedger_GetAccountById_Handler,
		},
		{
			MethodName: "get_accounts_by_organization",
			Handler:    _MServiceLedger_GetAccountsByOrganization_Handler,
		},
		{
			MethodName: "create_transaction",
			Handler:    _MServiceLedger_CreateTransaction_Handler,
		},
		{
			MethodName: "update_transaction",
			Handler:    _MServiceLedger_UpdateTransaction_Handler,
		},
		{
			MethodName: "delete_transaction",
			Handler:    _MServiceLedger_DeleteTransaction_Handler,
		},
		{
			MethodName: "get_transaction_by_id",
			Handler:    _MServiceLedger_GetTransactionById_Handler,
		},
		{
			MethodName: "get_transaction_wrapper_by_id",
			Handler:    _MServiceLedger_GetTransactionWrapperById_Handler,
		},
		{
			MethodName: "get_transaction_wrappers_by_date",
			Handler:    _MServiceLedger_GetTransactionWrappersByDate_Handler,
		},
		{
			MethodName: "add_transaction_details",
			Handler:    _MServiceLedger_AddTransactionDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceLedger.proto",
}

func init() { proto.RegisterFile("MServiceLedger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xed, 0x8f, 0x1b, 0x47,
	0x19, 0xd7, 0xd8, 0x3e, 0xbf, 0x3c, 0x3e, 0xdb, 0xb9, 0xbd, 0x4b, 0xe2, 0x98, 0xbb, 0x72, 0xd9,
	0xa4, 0xed, 0xf5, 0x85, 0x2b, 0xb9, 0x00, 0x97, 0xb6, 0x28, 0x6d, 0x2e, 0x07, 0x47, 0x44, 0x52,
	0xc0, 0x4d, 0xa9, 0xc4, 0x17, 0x6b, 0xcf, 0x3b, 0x75, 0xb7, 0xd8, 0x5e, 0x77, 0x77, 0x2f, 0xad,
	0x2b, 0x15, 0xd1, 0x0f, 0x54, 0xd0, 0x0a, 0x09, 0xf8, 0x82, 0x54, 0x55, 0xa2, 0x42, 0x20, 0x01,
	0x42, 0x48, 0x15, 0x45, 0xe2, 0x0b, 0x48, 0x20, 0xe5, 0x2b, 0x12, 0x08, 0xf1, 0x2f, 0xf0, 0x99,
	0xef, 0x20, 0xa1, 0x99, 0x9d, 0xb5, 0x67, 0x76, 0x67, 0xbd, 0xb3, 0xbe, 0x3d, 0x47, 0x85, 0x7c,
	0x3b, 0xcf, 0xce, 0xcc, 0xf3, 0x3c, 0xbf, 0xe7, 0x37, 0xcf, 0xcc, 0x3c, 0xf3, 0x24, 0xb0, 0x76,
	0xeb, 0x79, 0xec, 0xdc, 0xb1, 0xba, 0xf8, 0x26, 0x36, 0x7b, 0xd8, 0xd9, 0x1e, 0x39, 0xb6, 0x67,
	0x6b, 0xeb, 0xb6, 0xd3, 0xdb, 0xee, 0x19, 0x1e, 0x76, 0x8c, 0x2e, 0xde, 0x1e, 0xb8, 0x7e, 0x97,
	0xed, 0x3e, 0xed, 0xd3, 0xd2, 0xf6, 0x07, 0xfd, 0x2f, 0xbc, 0xee, 0xe1, 0xa1, 0x6b, 0xd9, 0x43,
	0x7f, 0x84, 0xfe, 0x7e, 0x1e, 0xea, 0x07, 0x37, 0xbf, 0xe2, 0xf4, 0x8c, 0xa1, 0xf5, 0x86, 0xe1,
	0x59, 0xf6, 0x50, 0xdb, 0x81, 0x86, 0xcd, 0xfd, 0xee, 0x58, 0x66, 0x13, 0x6d, 0xa2, 0xad, 0xea,
	0x4e, 0x65, 0xdb, 0x1c, 0xf4, 0xb7, 0x0f, 0x8e, 0x2c, 0xb3, 0x5d, 0xe7, 0x7b, 0xdc, 0x30, 0xb5,
	0x87, 0xa1, 0xd4, 0x75, 0xb0, 0xe1, 0x61, 0xb3, 0x99, 0xa3, 0x7d, 0x6b, 0xb4, 0xef, 0xbe, 0xe1,
	0xe1, 0xdb, 0xd6, 0x00, 0xb7, 0x83, 0xaf, 0xda, 0x23, 0x50, 0x1e, 0xd8, 0xa6, 0xf5, 0x92, 0x85,
	0xcd, 0x66, 0x5e, 0xd6, 0x73, 0xf2, 0x99, 0xcc, 0x69, 0xe2, 0x3e, 0x26, 0x73, 0x16, 0xa4, 0x73,
	0xb2, 0xaf, 0xda, 0x06, 0x80, 0xe5, 0x76, 0x82, 0xbe, 0x4b, 0x9b, 0x68, 0xab, 0xdc, 0xae, 0x58,
	0xee, 0x3e, 0xfb, 0xdc, 0x84, 0xd2, 0x1d, 0xec, 0x10, 0x9b, 0x9b, 0xc5, 0x4d, 0xb4, 0xb5, 0xd4,
	0x0e, 0x7e, 0x6a, 0x9f, 0x84, 0x6a, 0x80, 0x11, 0xb1, 0xb2, 0xb4, 0x89, 0xb6, 0xf2, 0x6d, 0x08,
	0x9a, 0x6e, 0x98, 0xda, 0x63, 0xb0, 0x22, 0x40, 0x31, 0x34, 0x06, 0xb8, 0x59, 0xde, 0x44, 0x5b,
	0x95, 0xf6, 0x29, 0xfe, 0xc3, 0x73, 0xc6, 0x00, 0x6b, 0x8f, 0x42, 0xe5, 0x25, 0xc7, 0x1e, 0x74,
	0x4c, 0xc3, 0xc3, 0xcd, 0x8a, 0xd4, 0x36, 0xf2, 0x9d, 0xfc, 0xd2, 0x1e, 0x82, 0x92, 0x67, 0xfb,
	0x3d, 0x41, 0xd6, 0xb3, 0xe8, 0xd9, 0xe4, 0x6f, 0xfd, 0x87, 0x05, 0xa8, 0x1c, 0xdc, 0xbc, 0xd6,
	0xed, 0xda, 0x47, 0x43, 0x4f, 0xfb, 0x14, 0xd4, 0x7a, 0xfd, 0x8e, 0xe1, 0xff, 0x92, 0xfa, 0xa5,
	0xda, 0xeb, 0xb3, 0xce, 0xff, 0xbb, 0x4e, 0x91, 0xf0, 0xb3, 0x9c, 0xc4, 0x4f, 0xa9, 0x23, 0x2b,
	0x31, 0x8e, 0x3c, 0x0f, 0xcb, 0x01, 0xc6, 0xb4, 0x1f, 0xd0, 0x7e, 0x55, 0xd6, 0x46, 0xbb, 0x3c,
	0x01, 0xab, 0x41, 0x17, 0x13, 0xbb, 0x5d, 0xc7, 0x1a, 0x91, 0xd1, 0xcd, 0x2a, 0xed, 0xa9, 0xb1,
	0x4f, 0xfb, 0xd3, 0x2f, 0xda, 0x43, 0xd0, 0x08, 0x06, 0x78, 0xe3, 0x11, 0xb5, 0x6c, 0x99, 0xda,
	0x5d, 0x63, 0xcd, 0xb7, 0xc7, 0x23, 0x62, 0x1c, 0x27, 0x9b, 0xf4, 0x6b, 0xd6, 0x04, 0xd9, 0xa4,
	0x93, 0xfe, 0x61, 0x0e, 0x6a, 0x13, 0x4e, 0x90, 0x96, 0x30, 0x64, 0x28, 0x02, 0x99, 0x44, 0x7a,
	0x4e, 0x26, 0x9d, 0x63, 0x4c, 0x5e, 0x99, 0x31, 0x05, 0x65, 0xc6, 0x2c, 0xa5, 0x60, 0x4c, 0x71,
	0x06, 0x63, 0x4a, 0x22, 0x63, 0xc2, 0x98, 0x95, 0xa3, 0x98, 0xbd, 0x55, 0x24, 0x98, 0xdd, 0x76,
	0x8c, 0xa1, 0x6b, 0x74, 0xa9, 0x43, 0x1e, 0x85, 0x95, 0x5e, 0xbf, 0xe3, 0x4d, 0x5b, 0xa6, 0xc8,
	0x35, 0x7a, 0x7d, 0xae, 0xe7, 0xfd, 0x85, 0xc4, 0x2f, 0xa4, 0x2b, 0x70, 0x8a, 0xc7, 0x2c, 0x3e,
	0xd6, 0x35, 0xb8, 0x6e, 0x34, 0xe4, 0xed, 0xc2, 0x59, 0x61, 0x24, 0xb7, 0x6c, 0xfc, 0x05, 0x76,
	0x86, 0x1f, 0xc1, 0x2d, 0x9d, 0x6d, 0x58, 0xe5, 0x07, 0x06, 0x04, 0xae, 0x52, 0x6b, 0x57, 0xb8,
	0x4f, 0x8c, 0xc4, 0x8f, 0x88, 0x2a, 0x52, 0x4a, 0x2c, 0x53, 0x09, 0x8d, 0x50, 0x67, 0x4d, 0x87,
	0x1a, 0x0d, 0xd9, 0x23, 0xc3, 0xf1, 0xc6, 0x64, 0xd2, 0x1a, 0x05, 0xa9, 0x4a, 0x1a, 0xbf, 0x4a,
	0xda, 0xfc, 0xb5, 0xc3, 0xf5, 0xa1, 0x01, 0xa1, 0x4e, 0x67, 0xab, 0x4d, 0x7a, 0xd1, 0x90, 0xf0,
	0x00, 0x54, 0x3d, 0x7b, 0x3a, 0x53, 0x83, 0xce, 0x54, 0xf1, 0xec, 0x60, 0x1e, 0x1d, 0x6a, 0x93,
	0xef, 0x74, 0x96, 0x53, 0x3e, 0x4d, 0x59, 0x0f, 0x3a, 0xc7, 0x45, 0xa8, 0x8f, 0x6c, 0xd7, 0xc3,
	0x66, 0xe7, 0x8e, 0x65, 0x74, 0xbe, 0x89, 0xc7, 0xcd, 0x15, 0xda, 0x69, 0xd9, 0x6f, 0xfd, 0xba,
	0x65, 0x7c, 0x19, 0x8f, 0xb5, 0xcf, 0x42, 0x83, 0xeb, 0x45, 0x5d, 0xa0, 0xc9, 0x5c, 0x50, 0x9b,
	0x8c, 0xa2, 0x7b, 0xc9, 0xbf, 0x8a, 0xb0, 0x26, 0xac, 0x81, 0x17, 0x1d, 0x63, 0x34, 0xc2, 0xce,
	0xfd, 0xa5, 0x70, 0x7f, 0x29, 0xfc, 0x7f, 0x2d, 0x05, 0xad, 0x07, 0x67, 0x42, 0x8c, 0x37, 0xb1,
	0x67, 0x58, 0x7d, 0xb7, 0xb9, 0xba, 0x99, 0xdf, 0xaa, 0xee, 0x5c, 0xda, 0x9e, 0x75, 0x90, 0xde,
	0x16, 0x56, 0xd1, 0x3e, 0x1d, 0xd9, 0x5e, 0x13, 0x56, 0x8a, 0xdf, 0xe8, 0xea, 0x77, 0x73, 0xb0,
	0x22, 0xf4, 0x56, 0xdb, 0xaf, 0x63, 0xfc, 0x9c, 0x8b, 0xf3, 0xf3, 0xc7, 0x73, 0xdf, 0x96, 0xb1,
	0xb3, 0x2c, 0x65, 0xa7, 0xfe, 0x5e, 0x0e, 0x4a, 0x07, 0x37, 0x29, 0x3b, 0x92, 0xd1, 0x3b, 0x07,
	0xe5, 0x09, 0xf7, 0x72, 0xf4, 0x6b, 0x69, 0xc4, 0x98, 0xf7, 0xf1, 0x04, 0x6a, 0x03, 0x80, 0x5b,
	0x2c, 0x3e, 0x44, 0x95, 0x51, 0xb0, 0x54, 0xf4, 0xff, 0x20, 0x58, 0x95, 0x50, 0x32, 0x65, 0x5c,
	0x6f, 0xb8, 0xf8, 0xd5, 0x23, 0x3c, 0xec, 0xe2, 0xce, 0xf0, 0x68, 0x70, 0x88, 0x1d, 0xc6, 0xb6,
	0x7a, 0xd0, 0xfc, 0x1c, 0x6d, 0x8d, 0xde, 0x41, 0xf2, 0x33, 0xef, 0x20, 0xe1, 0xb3, 0x74, 0x21,
	0x7a, 0x96, 0xbe, 0x08, 0x45, 0x63, 0x40, 0x7e, 0x31, 0xf8, 0x96, 0x7d, 0xf8, 0x70, 0xd7, 0x1a,
	0x18, 0xfd, 0x36, 0xfb, 0x46, 0x9c, 0x4a, 0xc1, 0x3b, 0xb4, 0x3c, 0x06, 0x5d, 0x89, 0x40, 0x77,
	0x68, 0x79, 0xfa, 0x1f, 0x10, 0x9c, 0xbb, 0x4e, 0xfd, 0xc6, 0xdf, 0x63, 0xdb, 0x44, 0x6f, 0xd7,
	0x4b, 0xa6, 0x8b, 0xf4, 0x6e, 0x90, 0x53, 0xb9, 0xe4, 0xe5, 0x95, 0x2f, 0x79, 0x85, 0x59, 0x97,
	0xbc, 0xdf, 0x20, 0x68, 0xc9, 0xf4, 0x77, 0x47, 0xf6, 0xd0, 0xc5, 0xc4, 0xfb, 0xd8, 0x71, 0x6c,
	0xa7, 0xd3, 0xb5, 0x4d, 0x4c, 0xf5, 0x5f, 0x6a, 0x57, 0x68, 0xcb, 0x75, 0xdb, 0xc4, 0xda, 0x05,
	0xa8, 0xf9, 0x9f, 0x07, 0xd8, 0x75, 0x8d, 0x5e, 0xa0, 0xfa, 0x32, 0x6d, 0xbc, 0xe5, 0xb7, 0xc9,
	0xf6, 0xb7, 0x7c, 0xd2, 0xfe, 0xc6, 0xf1, 0xb1, 0x20, 0xf0, 0x51, 0x7f, 0x37, 0x07, 0xe7, 0x5e,
	0x18, 0x99, 0x31, 0x80, 0xcf, 0x93, 0x3f, 0x08, 0x39, 0x29, 0x17, 0x71, 0x12, 0xa7, 0x4c, 0x5e,
	0x5c, 0x1c, 0x52, 0xf7, 0x15, 0x54, 0xdc, 0xb7, 0xa4, 0xec, 0xbe, 0xe2, 0x2c, 0xf7, 0xbd, 0x01,
	0x2d, 0x19, 0x18, 0x19, 0x7a, 0x2f, 0xd6, 0x78, 0xfd, 0x1d, 0x04, 0xe7, 0xfc, 0xf8, 0x71, 0xef,
	0x3d, 0x41, 0x80, 0x90, 0xe9, 0xb2, 0x10, 0x20, 0x5e, 0x85, 0xd6, 0x01, 0xf6, 0x78, 0xc1, 0x7b,
	0xe3, 0x1b, 0xe6, 0x49, 0x02, 0xa1, 0xff, 0x1e, 0xc1, 0x27, 0xa4, 0x32, 0x33, 0x34, 0xf8, 0x05,
	0x68, 0xf4, 0xfa, 0x1d, 0x5e, 0x33, 0xb6, 0x6e, 0x1f, 0x4f, 0x3a, 0xa1, 0x08, 0x3e, 0xa8, 0xf7,
	0xfa, 0xfc, 0x6f, 0x7d, 0x1f, 0xce, 0x87, 0x34, 0x77, 0xf7, 0xc6, 0xb7, 0xd8, 0x1c, 0xaa, 0x81,
	0x53, 0xff, 0x13, 0x02, 0x7d, 0xd6, 0x34, 0x19, 0xe2, 0xf0, 0x22, 0x9c, 0x0a, 0xe1, 0xe0, 0x36,
	0xf3, 0xf4, 0xa8, 0x96, 0x0e, 0x88, 0x86, 0x08, 0x84, 0xab, 0xbf, 0x8d, 0xa0, 0xe9, 0xc7, 0x5e,
	0x2e, 0xa1, 0xa2, 0xbc, 0x75, 0xa8, 0xe6, 0x55, 0xc2, 0x19, 0x8a, 0x7c, 0x34, 0x43, 0x31, 0x0e,
	0xf6, 0x30, 0x41, 0x8f, 0x85, 0xac, 0x9d, 0x0f, 0x10, 0x34, 0xfd, 0x08, 0x76, 0x92, 0x18, 0xc4,
	0x47, 0xf0, 0x30, 0x3a, 0x05, 0x29, 0x3a, 0x12, 0x0d, 0x17, 0x82, 0xce, 0x9b, 0xd0, 0xf4, 0xa3,
	0xda, 0x3d, 0x01, 0x87, 0x58, 0x2e, 0x11, 0xbf, 0x10, 0xcb, 0x4d, 0x38, 0x77, 0x80, 0x3d, 0x4e,
	0x2e, 0x1f, 0x52, 0xb3, 0x32, 0x5d, 0xff, 0x1d, 0xa2, 0xa1, 0x3b, 0x22, 0x26, 0x43, 0x13, 0x9f,
	0xa7, 0x51, 0x34, 0xb2, 0x02, 0xab, 0x3b, 0x8f, 0x25, 0x05, 0x0f, 0x1e, 0xf4, 0xda, 0xe4, 0x5c,
	0x4b, 0x29, 0x79, 0x1d, 0x36, 0x45, 0xb5, 0xe7, 0x09, 0xa1, 0x7f, 0x44, 0x34, 0x12, 0xc7, 0xcd,
	0x92, 0xe9, 0x4e, 0x72, 0x2a, 0x84, 0x41, 0x10, 0x41, 0x53, 0x81, 0x50, 0x17, 0x40, 0x70, 0xf5,
	0xf7, 0x10, 0xac, 0xfb, 0x71, 0x2b, 0x74, 0xc9, 0x55, 0xe6, 0x49, 0xda, 0xbb, 0xae, 0xec, 0xd6,
	0x98, 0x97, 0xdf, 0x1a, 0xdf, 0x84, 0x8d, 0x18, 0xdd, 0x16, 0xb2, 0x7e, 0x3e, 0x42, 0xb0, 0xee,
	0x47, 0xad, 0x45, 0x61, 0x13, 0x1f, 0x63, 0x65, 0xa8, 0x15, 0x62, 0x51, 0x8b, 0xd1, 0x7a, 0x21,
	0xa8, 0x7d, 0x0f, 0xc1, 0xba, 0x1f, 0xf1, 0xee, 0x39, 0x6a, 0x04, 0x8a, 0x18, 0x55, 0x16, 0x02,
	0xc5, 0x08, 0x36, 0x0e, 0xb0, 0x17, 0x92, 0x9d, 0x2a, 0x08, 0xa7, 0x84, 0x42, 0xbf, 0x8b, 0xe0,
	0x81, 0x38, 0x91, 0x19, 0x9a, 0xdc, 0x81, 0xd5, 0x50, 0x66, 0x82, 0x0b, 0xca, 0x4f, 0xa4, 0x48,
	0xbe, 0x51, 0x67, 0xac, 0x08, 0xc9, 0x0c, 0xca, 0xe1, 0x03, 0xb8, 0x18, 0x35, 0x63, 0x9e, 0x00,
	0xfd, 0x17, 0x04, 0x0f, 0x26, 0xcc, 0x94, 0x21, 0x2e, 0x06, 0xac, 0x49, 0x70, 0x09, 0x02, 0x75,
	0x6a, 0x60, 0xb4, 0x08, 0x30, 0xae, 0x6e, 0x83, 0xe6, 0xc7, 0x44, 0x9a, 0x4c, 0x53, 0x26, 0xd2,
	0x8c, 0x9c, 0x9a, 0x98, 0x9d, 0xca, 0x87, 0xb3, 0x53, 0x2e, 0xac, 0x0a, 0x02, 0x17, 0x15, 0x44,
	0x34, 0x3f, 0x88, 0x65, 0x66, 0x66, 0x7c, 0x6c, 0x15, 0x01, 0x28, 0x48, 0x00, 0x10, 0x54, 0x59,
	0x08, 0x00, 0xaf, 0x80, 0xe6, 0x47, 0xae, 0x93, 0xb7, 0x9f, 0x18, 0x28, 0xc8, 0x5a, 0x88, 0x81,
	0x5f, 0x83, 0xd5, 0x03, 0xec, 0x51, 0x89, 0xa9, 0x22, 0x62, 0xbc, 0x85, 0xfa, 0xfb, 0x08, 0xd6,
	0xc4, 0x39, 0x33, 0xb4, 0xe4, 0x59, 0x28, 0xf7, 0xfa, 0xfe, 0x9b, 0x07, 0x8b, 0x73, 0x0f, 0x26,
	0x2d, 0x67, 0x1f, 0xce, 0x52, 0xaf, 0x4f, 0xff, 0xd0, 0xaf, 0xd2, 0x74, 0x03, 0xf9, 0xdb, 0x9a,
	0x2b, 0x94, 0xfd, 0x02, 0xc1, 0xba, 0x7c, 0x82, 0x0c, 0xcd, 0xdc, 0x07, 0x60, 0x66, 0x5a, 0x93,
	0xb8, 0xa5, 0x68, 0x68, 0xc5, 0x37, 0xd4, 0xc2, 0xae, 0xfe, 0x4f, 0x04, 0x6b, 0xc2, 0x6d, 0x58,
	0xd9, 0xbd, 0x92, 0x4c, 0x4f, 0x2e, 0x29, 0xd3, 0x13, 0xce, 0x51, 0xe7, 0x95, 0xeb, 0x3d, 0x0a,
	0x69, 0xea, 0x3d, 0x96, 0x64, 0xb7, 0x9f, 0x9f, 0x21, 0x38, 0x1d, 0xb2, 0x34, 0x43, 0x6f, 0xa4,
	0x4c, 0xd6, 0xc7, 0x67, 0x7c, 0xff, 0x8d, 0x60, 0x4d, 0xb8, 0x80, 0x07, 0x0e, 0x49, 0x59, 0x92,
	0x74, 0x8c, 0x3c, 0xaf, 0xc2, 0x4b, 0x42, 0x8c, 0x97, 0x96, 0xd2, 0x78, 0xa9, 0x28, 0xf3, 0xd2,
	0x11, 0x9c, 0x0e, 0x59, 0xbf, 0x90, 0x18, 0xf7, 0x6d, 0x04, 0x6b, 0xc2, 0xe5, 0x7f, 0xe1, 0xa8,
	0x13, 0xcb, 0x43, 0x1a, 0x2c, 0xc4, 0xf2, 0x1e, 0x9c, 0x9e, 0x5e, 0x8b, 0xf9, 0xf8, 0x9e, 0xb1,
	0xe5, 0x64, 0xfd, 0x9d, 0x09, 0x4b, 0xca, 0xd0, 0xc2, 0x2f, 0xd2, 0x70, 0xc8, 0xd4, 0x65, 0xab,
	0xef, 0x61, 0xc5, 0xfb, 0x36, 0x09, 0x88, 0xec, 0x4f, 0xfd, 0x35, 0x3e, 0xd9, 0xe0, 0xee, 0x8d,
	0xe7, 0x7a, 0xe8, 0x9a, 0x23, 0x36, 0xea, 0x1f, 0x0a, 0x09, 0x8a, 0x88, 0xe4, 0x0c, 0xa1, 0xfa,
	0x12, 0x54, 0xa7, 0x50, 0x05, 0x5b, 0x87, 0x32, 0x56, 0x30, 0xc1, 0xca, 0xd5, 0x7f, 0x9b, 0x0f,
	0x72, 0xba, 0xdc, 0xe9, 0xf7, 0x44, 0x77, 0x10, 0x59, 0x29, 0x48, 0xfe, 0xb8, 0xa5, 0x20, 0x85,
	0x79, 0x4a, 0x41, 0x96, 0xe2, 0x2e, 0xb9, 0x91, 0xfa, 0x8e, 0x62, 0xb4, 0xbe, 0x23, 0x54, 0xb7,
	0x51, 0x0a, 0xd7, 0x6d, 0x44, 0x6b, 0x32, 0xca, 0x6a, 0x35, 0x19, 0x15, 0x85, 0xf2, 0xa4, 0x9f,
	0x4f, 0x5e, 0x71, 0x05, 0xaf, 0x65, 0xc8, 0x30, 0xe9, 0x7b, 0x78, 0x5e, 0xfe, 0x1e, 0x1e, 0xbf,
	0x15, 0xde, 0xcd, 0x07, 0xd9, 0x72, 0x09, 0xbb, 0xd2, 0x3c, 0xb9, 0x1f, 0x63, 0x2f, 0x94, 0xf1,
	0xad, 0x70, 0x5c, 0xbe, 0x2d, 0xcd, 0xc3, 0xb7, 0xa2, 0x32, 0xdf, 0x4a, 0x89, 0x7c, 0x2b, 0x27,
	0xf3, 0xad, 0xa2, 0xc6, 0x37, 0x50, 0xe0, 0xdb, 0xe4, 0x49, 0xe1, 0xa4, 0xe8, 0x16, 0xbf, 0xbb,
	0xbd, 0x85, 0x82, 0x37, 0x85, 0x7b, 0x46, 0xa1, 0xe9, 0xbb, 0xc2, 0xe2, 0xcd, 0x7f, 0x99, 0xbe,
	0x2b, 0x70, 0x72, 0xf9, 0x0d, 0x3e, 0x4b, 0xf3, 0xf5, 0x8f, 0xfc, 0xb7, 0x85, 0x88, 0xa8, 0x0c,
	0xcd, 0x6c, 0x43, 0x5d, 0xd4, 0x57, 0xf5, 0x69, 0x81, 0xc7, 0xbd, 0x26, 0x58, 0xa6, 0xdb, 0x74,
	0xb7, 0x8f, 0x56, 0x6a, 0x9e, 0x18, 0x4e, 0x7f, 0xf5, 0x77, 0xf9, 0x38, 0x89, 0x19, 0xc2, 0xf5,
	0x72, 0xa4, 0xf2, 0xee, 0x35, 0x5f, 0x12, 0x83, 0x6d, 0x27, 0x05, 0x6c, 0x4c, 0xc7, 0x50, 0xe9,
	0x1d, 0x6b, 0xd5, 0xff, 0x86, 0xe0, 0x82, 0xd4, 0x26, 0x77, 0x6f, 0x4c, 0x02, 0xc0, 0x89, 0x1e,
	0x08, 0x1e, 0x07, 0x70, 0x3d, 0xc3, 0xf1, 0x66, 0x1c, 0x05, 0x2a, 0xb4, 0x03, 0x0d, 0xca, 0x5b,
	0x50, 0xc6, 0x43, 0x73, 0x46, 0x18, 0x2f, 0xe1, 0xa1, 0x49, 0x83, 0xd6, 0x3f, 0x50, 0x38, 0xb1,
	0x19, 0x36, 0x2a, 0x43, 0x5f, 0xbd, 0x02, 0x67, 0xe5, 0xbe, 0x0a, 0x4e, 0x67, 0xf3, 0x38, 0xeb,
	0xb4, 0xcc, 0x59, 0xae, 0xfe, 0x77, 0x04, 0xeb, 0xd7, 0x4c, 0x33, 0x5a, 0x42, 0x79, 0x22, 0x61,
	0x31, 0xbe, 0xfe, 0x33, 0x9f, 0x6d, 0xfd, 0x67, 0x17, 0x36, 0x62, 0xac, 0xca, 0xce, 0x4f, 0x3b,
	0x7f, 0xbe, 0x00, 0x75, 0xf1, 0x9f, 0x83, 0x69, 0xdf, 0x45, 0xb0, 0xea, 0x97, 0x32, 0x0a, 0x45,
	0x13, 0xda, 0xee, 0x6c, 0xc3, 0x62, 0xab, 0xe8, 0x5a, 0x57, 0xd2, 0x0f, 0x64, 0x16, 0x12, 0x55,
	0x8e, 0xe8, 0x46, 0x9b, 0x4a, 0x95, 0xd8, 0xfa, 0xb2, 0x24, 0x55, 0x66, 0xd4, 0x62, 0x11, 0x55,
	0xfc, 0xf2, 0xcb, 0x54, 0xaa, 0xc4, 0x16, 0x58, 0x25, 0xa9, 0x32, 0xa3, 0x1a, 0xea, 0xfb, 0x08,
	0xce, 0xf4, 0xb0, 0x27, 0xe8, 0xd1, 0x39, 0x24, 0xc7, 0x20, 0x2d, 0x61, 0xd2, 0xf8, 0x32, 0xa7,
	0xd6, 0x93, 0x73, 0x8c, 0x64, 0xfa, 0xfc, 0x14, 0xc1, 0x46, 0x58, 0x1f, 0x97, 0x28, 0x14, 0x4c,
	0xa2, 0x3d, 0x93, 0x6a, 0xf2, 0x68, 0x82, 0xb2, 0xf5, 0xec, 0xfc, 0x13, 0x30, 0x25, 0xdf, 0x9e,
	0xb2, 0x9a, 0x4f, 0xdb, 0x68, 0x9f, 0x53, 0x21, 0x67, 0xb4, 0x7c, 0xa3, 0xb5, 0x9b, 0x7a, 0x1c,
	0xa7, 0x08, 0xe3, 0x74, 0x1a, 0x45, 0xe2, 0x8a, 0x6c, 0x5a, 0xbb, 0xa9, 0xc7, 0x71, 0x8a, 0x30,
	0x46, 0xa7, 0x51, 0x24, 0xae, 0xa0, 0xa5, 0xb5, 0x9b, 0x7a, 0x1c, 0x53, 0xe4, 0x5d, 0xc6, 0x67,
	0x21, 0x9d, 0xe6, 0xf3, 0x79, 0x37, 0xd1, 0xef, 0xf2, 0x12, 0x93, 0xd6, 0x95, 0xf4, 0x03, 0x99,
	0x36, 0x1f, 0x30, 0x36, 0x0b, 0xe5, 0x0e, 0x02, 0x9b, 0xaf, 0xa6, 0x99, 0x5b, 0x42, 0xe6, 0x67,
	0xe6, 0x1e, 0xcf, 0x54, 0xfc, 0x11, 0x82, 0xb3, 0x8c, 0xcb, 0xe1, 0x7b, 0x95, 0xf6, 0x94, 0x0a,
	0x2f, 0xe5, 0xaf, 0xe3, 0xad, 0xa7, 0xe7, 0x1a, 0xcb, 0x29, 0xc5, 0x78, 0x9d, 0x56, 0xa9, 0x59,
	0x85, 0x0e, 0x49, 0x4a, 0xcd, 0x2e, 0x37, 0x20, 0x4a, 0x31, 0x8e, 0xa7, 0x55, 0x6a, 0x56, 0x1d,
	0x41, 0x92, 0x52, 0xb3, 0x1f, 0xfe, 0x7f, 0x8c, 0xa0, 0x45, 0x18, 0x16, 0xb9, 0x13, 0xfb, 0x9c,
	0x7f, 0x3a, 0x91, 0x1e, 0xf1, 0xaf, 0xfa, 0xad, 0xcf, 0xcf, 0x37, 0x98, 0x69, 0xf6, 0x6b, 0x04,
	0xe7, 0x65, 0x9a, 0x89, 0xfc, 0xdf, 0x4b, 0x2b, 0x43, 0xb2, 0x06, 0xae, 0x1f, 0x6b, 0x0e, 0xa6,
	0xae, 0x0b, 0xcb, 0x6c, 0x19, 0xd0, 0x3c, 0x80, 0xf6, 0x69, 0x15, 0xfe, 0xf2, 0x8f, 0x9a, 0xad,
	0x4b, 0x29, 0x46, 0x4c, 0x85, 0x32, 0x9a, 0x2b, 0x09, 0x8d, 0xbe, 0x24, 0x27, 0x09, 0x95, 0x3d,
	0xf8, 0xba, 0xb0, 0xcc, 0x68, 0xac, 0x24, 0x34, 0xfa, 0x7c, 0x9b, 0x24, 0x54, 0xf6, 0x08, 0xfb,
	0x3a, 0x34, 0x08, 0x19, 0xfc, 0x1c, 0x8b, 0xcf, 0xcd, 0x4b, 0x89, 0x6e, 0x0b, 0xbf, 0xaa, 0xb6,
	0x76, 0xd2, 0x0c, 0x61, 0x92, 0x7f, 0x80, 0xe0, 0x6c, 0x20, 0xda, 0x0a, 0xb1, 0xef, 0x49, 0xa5,
	0xf9, 0x64, 0xcf, 0x9c, 0xad, 0xa7, 0xe6, 0x19, 0xca, 0x54, 0x1a, 0x43, 0x5d, 0x3c, 0x3e, 0x68,
	0x3b, 0x29, 0x4e, 0x00, 0x81, 0x06, 0x97, 0x53, 0x8d, 0x99, 0x8a, 0x16, 0x0f, 0x0c, 0x49, 0xa2,
	0x65, 0xaf, 0x6d, 0x49, 0xa2, 0xe5, 0x6f, 0x54, 0x63, 0xa8, 0x8b, 0x47, 0x84, 0x24, 0xd1, 0xb2,
	0x27, 0xa7, 0x24, 0xd1, 0xf2, 0x47, 0xa2, 0x6f, 0xc1, 0x0a, 0xbf, 0x0d, 0xfb, 0xfc, 0xbb, 0xac,
	0xba, 0x75, 0xf2, 0x0c, 0xfc, 0x4c, 0xba, 0x41, 0x4c, 0xfe, 0x4f, 0x10, 0xac, 0x73, 0x0a, 0x50,
	0x12, 0x0a, 0x27, 0x7f, 0xe5, 0x63, 0x80, 0xfc, 0xcd, 0x45, 0xfd, 0x18, 0x10, 0xf7, 0x72, 0xf2,
	0x1d, 0x04, 0x5a, 0xf4, 0x18, 0xa0, 0x76, 0xa2, 0x8d, 0x26, 0x0f, 0xd5, 0x4e, 0xb4, 0xb2, 0x8c,
	0x1f, 0xd1, 0x23, 0xba, 0xf3, 0xab, 0x1d, 0x68, 0xd3, 0xeb, 0x11, 0x9f, 0x78, 0x25, 0x7a, 0x44,
	0x37, 0x7b, 0xb5, 0xf3, 0x6c, 0x7a, 0x3d, 0xe2, 0x33, 0xa0, 0xef, 0x20, 0x38, 0x1d, 0xde, 0x45,
	0x55, 0x8f, 0xb3, 0xf2, 0xcc, 0xa6, 0xc2, 0x71, 0x36, 0x2e, 0x4f, 0x19, 0x1c, 0x67, 0x25, 0xa9,
	0x18, 0xa6, 0xd4, 0xd5, 0x34, 0x73, 0x47, 0xb3, 0x89, 0x0a, 0x3c, 0x4e, 0xc8, 0x0d, 0xfe, 0x12,
	0xc1, 0x66, 0x8c, 0x8a, 0x74, 0xd5, 0x11, 0x7f, 0x6b, 0xd7, 0xe6, 0x90, 0x22, 0x66, 0xeb, 0x5a,
	0x7b, 0xc7, 0x99, 0x82, 0x3b, 0x50, 0x1a, 0xa6, 0x29, 0xcb, 0xff, 0x24, 0x1d, 0x28, 0x67, 0xa5,
	0xa8, 0x92, 0x0e, 0x94, 0x33, 0x13, 0x41, 0x7b, 0xe7, 0xbf, 0x51, 0x0f, 0x06, 0xf8, 0xfd, 0x7f,
	0x95, 0x0b, 0x25, 0x75, 0x0e, 0x8b, 0xf4, 0xbf, 0xec, 0xb9, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x34, 0x85, 0x41, 0x51, 0xfc, 0x47, 0x00, 0x00,
}
