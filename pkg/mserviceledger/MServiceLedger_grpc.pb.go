// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mserviceledger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MServiceLedgerClient is the client API for MServiceLedger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MServiceLedgerClient interface {
	// create a new general ledger organization
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// update an existing general ledger organization
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// delete an existing general ledger organization
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// get general ledger organization by id
	GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error)
	// get general ledger organizations by mservice
	GetOrganizationsByMservice(ctx context.Context, in *GetOrganizationsByMserviceRequest, opts ...grpc.CallOption) (*GetOrganizationsByMserviceResponse, error)
	// create general ledger account type
	CreateAccountType(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error)
	// update general ledger account type
	UpdateAccountType(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error)
	// delete general ledger account type
	DeleteAccountType(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error)
	// get general ledger account type by id
	GetAccountTypeById(ctx context.Context, in *GetAccountTypeByIdRequest, opts ...grpc.CallOption) (*GetAccountTypeByIdResponse, error)
	// get general ledger account types by mservice
	GetAccountTypesByMservice(ctx context.Context, in *GetAccountTypesByMserviceRequest, opts ...grpc.CallOption) (*GetAccountTypesByMserviceResponse, error)
	// create general ledger transaction type
	CreateTransactionType(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error)
	// update general ledger transaction type
	UpdateTransactionType(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error)
	// delete general ledger transaction type
	DeleteTransactionType(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error)
	// get general ledger transaction type by id
	GetTransactionTypeById(ctx context.Context, in *GetTransactionTypeByIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByIdResponse, error)
	// get general ledger transaction types by mservice
	GetTransactionTypesByMservice(ctx context.Context, in *GetTransactionTypesByMserviceRequest, opts ...grpc.CallOption) (*GetTransactionTypesByMserviceResponse, error)
	// create general ledger party
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	// update general ledger party
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error)
	// delete general ledger party
	DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error)
	// get general ledger party by id
	GetPartyById(ctx context.Context, in *GetPartyByIdRequest, opts ...grpc.CallOption) (*GetPartyByIdResponse, error)
	// get general ledger parties by mservice
	GetPartiesByMservice(ctx context.Context, in *GetPartiesByMserviceRequest, opts ...grpc.CallOption) (*GetPartiesByMserviceResponse, error)
	// create general ledger account
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	// update general ledger account
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	// delete general ledger account
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	// get general ledger account by id
	GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error)
	// get general ledger accounts by organization
	GetAccountsByOrganization(ctx context.Context, in *GetAccountsByOrganizationRequest, opts ...grpc.CallOption) (*GetAccountsByOrganizationResponse, error)
	// create general ledger transaction
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// update general ledger transaction
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error)
	// delete general ledger transaction
	DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error)
	// get general ledger transaction by id
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error)
	// get general ledger transaction wrapper by id
	GetTransactionWrapperById(ctx context.Context, in *GetTransactionWrapperByIdRequest, opts ...grpc.CallOption) (*GetTransactionWrapperByIdResponse, error)
	// get general ledger transaction wrappers by date
	GetTransactionWrappersByDate(ctx context.Context, in *GetTransactionWrappersByDateRequest, opts ...grpc.CallOption) (*GetTransactionWrappersByDateResponse, error)
	// add transaction details
	AddTransactionDetails(ctx context.Context, in *AddTransactionDetailsRequest, opts ...grpc.CallOption) (*AddTransactionDetailsResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceLedgerClient struct {
	cc grpc.ClientConnInterface
}

func NewMServiceLedgerClient(cc grpc.ClientConnInterface) MServiceLedgerClient {
	return &mServiceLedgerClient{cc}
}

func (c *mServiceLedgerClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_organization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_organization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_organization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetOrganizationById(ctx context.Context, in *GetOrganizationByIdRequest, opts ...grpc.CallOption) (*GetOrganizationByIdResponse, error) {
	out := new(GetOrganizationByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_organization_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetOrganizationsByMservice(ctx context.Context, in *GetOrganizationsByMserviceRequest, opts ...grpc.CallOption) (*GetOrganizationsByMserviceResponse, error) {
	out := new(GetOrganizationsByMserviceResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_organizations_by_mservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateAccountType(ctx context.Context, in *CreateAccountTypeRequest, opts ...grpc.CallOption) (*CreateAccountTypeResponse, error) {
	out := new(CreateAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_account_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateAccountType(ctx context.Context, in *UpdateAccountTypeRequest, opts ...grpc.CallOption) (*UpdateAccountTypeResponse, error) {
	out := new(UpdateAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_account_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteAccountType(ctx context.Context, in *DeleteAccountTypeRequest, opts ...grpc.CallOption) (*DeleteAccountTypeResponse, error) {
	out := new(DeleteAccountTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_account_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountTypeById(ctx context.Context, in *GetAccountTypeByIdRequest, opts ...grpc.CallOption) (*GetAccountTypeByIdResponse, error) {
	out := new(GetAccountTypeByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_type_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountTypesByMservice(ctx context.Context, in *GetAccountTypesByMserviceRequest, opts ...grpc.CallOption) (*GetAccountTypesByMserviceResponse, error) {
	out := new(GetAccountTypesByMserviceResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_types_by_mservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateTransactionType(ctx context.Context, in *CreateTransactionTypeRequest, opts ...grpc.CallOption) (*CreateTransactionTypeResponse, error) {
	out := new(CreateTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateTransactionType(ctx context.Context, in *UpdateTransactionTypeRequest, opts ...grpc.CallOption) (*UpdateTransactionTypeResponse, error) {
	out := new(UpdateTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteTransactionType(ctx context.Context, in *DeleteTransactionTypeRequest, opts ...grpc.CallOption) (*DeleteTransactionTypeResponse, error) {
	out := new(DeleteTransactionTypeResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionTypeById(ctx context.Context, in *GetTransactionTypeByIdRequest, opts ...grpc.CallOption) (*GetTransactionTypeByIdResponse, error) {
	out := new(GetTransactionTypeByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_type_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionTypesByMservice(ctx context.Context, in *GetTransactionTypesByMserviceRequest, opts ...grpc.CallOption) (*GetTransactionTypesByMserviceResponse, error) {
	out := new(GetTransactionTypesByMserviceResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_types_by_mservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	out := new(CreatePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error) {
	out := new(UpdatePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error) {
	out := new(DeletePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetPartyById(ctx context.Context, in *GetPartyByIdRequest, opts ...grpc.CallOption) (*GetPartyByIdResponse, error) {
	out := new(GetPartyByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_party_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetPartiesByMservice(ctx context.Context, in *GetPartiesByMserviceRequest, opts ...grpc.CallOption) (*GetPartiesByMserviceResponse, error) {
	out := new(GetPartiesByMserviceResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_parties_by_mservice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountById(ctx context.Context, in *GetAccountByIdRequest, opts ...grpc.CallOption) (*GetAccountByIdResponse, error) {
	out := new(GetAccountByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_account_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetAccountsByOrganization(ctx context.Context, in *GetAccountsByOrganizationRequest, opts ...grpc.CallOption) (*GetAccountsByOrganizationResponse, error) {
	out := new(GetAccountsByOrganizationResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_accounts_by_organization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*UpdateTransactionResponse, error) {
	out := new(UpdateTransactionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*DeleteTransactionResponse, error) {
	out := new(DeleteTransactionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionByIdResponse, error) {
	out := new(GetTransactionByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionWrapperById(ctx context.Context, in *GetTransactionWrapperByIdRequest, opts ...grpc.CallOption) (*GetTransactionWrapperByIdResponse, error) {
	out := new(GetTransactionWrapperByIdResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrapper_by_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetTransactionWrappersByDate(ctx context.Context, in *GetTransactionWrappersByDateRequest, opts ...grpc.CallOption) (*GetTransactionWrappersByDateResponse, error) {
	out := new(GetTransactionWrappersByDateResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrappers_by_date", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) AddTransactionDetails(ctx context.Context, in *AddTransactionDetailsRequest, opts ...grpc.CallOption) (*AddTransactionDetailsResponse, error) {
	out := new(AddTransactionDetailsResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/add_transaction_details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceLedgerClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.ledger.MServiceLedger/get_server_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MServiceLedgerServer is the server API for MServiceLedger service.
// All implementations must embed UnimplementedMServiceLedgerServer
// for forward compatibility
type MServiceLedgerServer interface {
	// create a new general ledger organization
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// update an existing general ledger organization
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// delete an existing general ledger organization
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// get general ledger organization by id
	GetOrganizationById(context.Context, *GetOrganizationByIdRequest) (*GetOrganizationByIdResponse, error)
	// get general ledger organizations by mservice
	GetOrganizationsByMservice(context.Context, *GetOrganizationsByMserviceRequest) (*GetOrganizationsByMserviceResponse, error)
	// create general ledger account type
	CreateAccountType(context.Context, *CreateAccountTypeRequest) (*CreateAccountTypeResponse, error)
	// update general ledger account type
	UpdateAccountType(context.Context, *UpdateAccountTypeRequest) (*UpdateAccountTypeResponse, error)
	// delete general ledger account type
	DeleteAccountType(context.Context, *DeleteAccountTypeRequest) (*DeleteAccountTypeResponse, error)
	// get general ledger account type by id
	GetAccountTypeById(context.Context, *GetAccountTypeByIdRequest) (*GetAccountTypeByIdResponse, error)
	// get general ledger account types by mservice
	GetAccountTypesByMservice(context.Context, *GetAccountTypesByMserviceRequest) (*GetAccountTypesByMserviceResponse, error)
	// create general ledger transaction type
	CreateTransactionType(context.Context, *CreateTransactionTypeRequest) (*CreateTransactionTypeResponse, error)
	// update general ledger transaction type
	UpdateTransactionType(context.Context, *UpdateTransactionTypeRequest) (*UpdateTransactionTypeResponse, error)
	// delete general ledger transaction type
	DeleteTransactionType(context.Context, *DeleteTransactionTypeRequest) (*DeleteTransactionTypeResponse, error)
	// get general ledger transaction type by id
	GetTransactionTypeById(context.Context, *GetTransactionTypeByIdRequest) (*GetTransactionTypeByIdResponse, error)
	// get general ledger transaction types by mservice
	GetTransactionTypesByMservice(context.Context, *GetTransactionTypesByMserviceRequest) (*GetTransactionTypesByMserviceResponse, error)
	// create general ledger party
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	// update general ledger party
	UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error)
	// delete general ledger party
	DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error)
	// get general ledger party by id
	GetPartyById(context.Context, *GetPartyByIdRequest) (*GetPartyByIdResponse, error)
	// get general ledger parties by mservice
	GetPartiesByMservice(context.Context, *GetPartiesByMserviceRequest) (*GetPartiesByMserviceResponse, error)
	// create general ledger account
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	// update general ledger account
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	// delete general ledger account
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	// get general ledger account by id
	GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error)
	// get general ledger accounts by organization
	GetAccountsByOrganization(context.Context, *GetAccountsByOrganizationRequest) (*GetAccountsByOrganizationResponse, error)
	// create general ledger transaction
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// update general ledger transaction
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error)
	// delete general ledger transaction
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error)
	// get general ledger transaction by id
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error)
	// get general ledger transaction wrapper by id
	GetTransactionWrapperById(context.Context, *GetTransactionWrapperByIdRequest) (*GetTransactionWrapperByIdResponse, error)
	// get general ledger transaction wrappers by date
	GetTransactionWrappersByDate(context.Context, *GetTransactionWrappersByDateRequest) (*GetTransactionWrappersByDateResponse, error)
	// add transaction details
	AddTransactionDetails(context.Context, *AddTransactionDetailsRequest) (*AddTransactionDetailsResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	mustEmbedUnimplementedMServiceLedgerServer()
}

// UnimplementedMServiceLedgerServer must be embedded to have forward compatible implementations.
type UnimplementedMServiceLedgerServer struct {
}

func (UnimplementedMServiceLedgerServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedMServiceLedgerServer) GetOrganizationById(context.Context, *GetOrganizationByIdRequest) (*GetOrganizationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetOrganizationsByMservice(context.Context, *GetOrganizationsByMserviceRequest) (*GetOrganizationsByMserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationsByMservice not implemented")
}
func (UnimplementedMServiceLedgerServer) CreateAccountType(context.Context, *CreateAccountTypeRequest) (*CreateAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountType not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateAccountType(context.Context, *UpdateAccountTypeRequest) (*UpdateAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountType not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteAccountType(context.Context, *DeleteAccountTypeRequest) (*DeleteAccountTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountType not implemented")
}
func (UnimplementedMServiceLedgerServer) GetAccountTypeById(context.Context, *GetAccountTypeByIdRequest) (*GetAccountTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTypeById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetAccountTypesByMservice(context.Context, *GetAccountTypesByMserviceRequest) (*GetAccountTypesByMserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountTypesByMservice not implemented")
}
func (UnimplementedMServiceLedgerServer) CreateTransactionType(context.Context, *CreateTransactionTypeRequest) (*CreateTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransactionType not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateTransactionType(context.Context, *UpdateTransactionTypeRequest) (*UpdateTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionType not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteTransactionType(context.Context, *DeleteTransactionTypeRequest) (*DeleteTransactionTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransactionType not implemented")
}
func (UnimplementedMServiceLedgerServer) GetTransactionTypeById(context.Context, *GetTransactionTypeByIdRequest) (*GetTransactionTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTypeById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetTransactionTypesByMservice(context.Context, *GetTransactionTypesByMserviceRequest) (*GetTransactionTypesByMserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionTypesByMservice not implemented")
}
func (UnimplementedMServiceLedgerServer) CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParty not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParty not implemented")
}
func (UnimplementedMServiceLedgerServer) GetPartyById(context.Context, *GetPartyByIdRequest) (*GetPartyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetPartiesByMservice(context.Context, *GetPartiesByMserviceRequest) (*GetPartiesByMserviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartiesByMservice not implemented")
}
func (UnimplementedMServiceLedgerServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedMServiceLedgerServer) GetAccountById(context.Context, *GetAccountByIdRequest) (*GetAccountByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetAccountsByOrganization(context.Context, *GetAccountsByOrganizationRequest) (*GetAccountsByOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByOrganization not implemented")
}
func (UnimplementedMServiceLedgerServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedMServiceLedgerServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*UpdateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedMServiceLedgerServer) DeleteTransaction(context.Context, *DeleteTransactionRequest) (*DeleteTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedMServiceLedgerServer) GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetTransactionWrapperById(context.Context, *GetTransactionWrapperByIdRequest) (*GetTransactionWrapperByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionWrapperById not implemented")
}
func (UnimplementedMServiceLedgerServer) GetTransactionWrappersByDate(context.Context, *GetTransactionWrappersByDateRequest) (*GetTransactionWrappersByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionWrappersByDate not implemented")
}
func (UnimplementedMServiceLedgerServer) AddTransactionDetails(context.Context, *AddTransactionDetailsRequest) (*AddTransactionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTransactionDetails not implemented")
}
func (UnimplementedMServiceLedgerServer) GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedMServiceLedgerServer) mustEmbedUnimplementedMServiceLedgerServer() {}

// UnsafeMServiceLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MServiceLedgerServer will
// result in compilation errors.
type UnsafeMServiceLedgerServer interface {
	mustEmbedUnimplementedMServiceLedgerServer()
}

func RegisterMServiceLedgerServer(s grpc.ServiceRegistrar, srv MServiceLedgerServer) {
	s.RegisterService(&MServiceLedger_ServiceDesc, srv)
}

func _MServiceLedger_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_organization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_organization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_organization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_organization_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetOrganizationById(ctx, req.(*GetOrganizationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetOrganizationsByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationsByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetOrganizationsByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_organizations_by_mservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetOrganizationsByMservice(ctx, req.(*GetOrganizationsByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_account_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateAccountType(ctx, req.(*CreateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_account_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateAccountType(ctx, req.(*UpdateAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteAccountType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteAccountType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_account_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteAccountType(ctx, req.(*DeleteAccountTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_account_type_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountTypeById(ctx, req.(*GetAccountTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountTypesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountTypesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountTypesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_account_types_by_mservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountTypesByMservice(ctx, req.(*GetAccountTypesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateTransactionType(ctx, req.(*CreateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateTransactionType(ctx, req.(*UpdateTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteTransactionType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteTransactionType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteTransactionType(ctx, req.(*DeleteTransactionTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_type_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionTypeById(ctx, req.(*GetTransactionTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionTypesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionTypesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionTypesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_types_by_mservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionTypesByMservice(ctx, req.(*GetTransactionTypesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteParty(ctx, req.(*DeletePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetPartyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetPartyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_party_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetPartyById(ctx, req.(*GetPartyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetPartiesByMservice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesByMserviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetPartiesByMservice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_parties_by_mservice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetPartiesByMservice(ctx, req.(*GetPartiesByMserviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_account_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountById(ctx, req.(*GetAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetAccountsByOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsByOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetAccountsByOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_accounts_by_organization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetAccountsByOrganization(ctx, req.(*GetAccountsByOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/create_transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/update_transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/delete_transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionWrapperById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionWrapperByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionWrapperById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrapper_by_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionWrapperById(ctx, req.(*GetTransactionWrapperByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetTransactionWrappersByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionWrappersByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetTransactionWrappersByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_transaction_wrappers_by_date",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetTransactionWrappersByDate(ctx, req.(*GetTransactionWrappersByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_AddTransactionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTransactionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).AddTransactionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/add_transaction_details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).AddTransactionDetails(ctx, req.(*AddTransactionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceLedger_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceLedgerServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.ledger.MServiceLedger/get_server_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceLedgerServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MServiceLedger_ServiceDesc is the grpc.ServiceDesc for MServiceLedger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MServiceLedger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.ledger.MServiceLedger",
	HandlerType: (*MServiceLedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_organization",
			Handler:    _MServiceLedger_CreateOrganization_Handler,
		},
		{
			MethodName: "update_organization",
			Handler:    _MServiceLedger_UpdateOrganization_Handler,
		},
		{
			MethodName: "delete_organization",
			Handler:    _MServiceLedger_DeleteOrganization_Handler,
		},
		{
			MethodName: "get_organization_by_id",
			Handler:    _MServiceLedger_GetOrganizationById_Handler,
		},
		{
			MethodName: "get_organizations_by_mservice",
			Handler:    _MServiceLedger_GetOrganizationsByMservice_Handler,
		},
		{
			MethodName: "create_account_type",
			Handler:    _MServiceLedger_CreateAccountType_Handler,
		},
		{
			MethodName: "update_account_type",
			Handler:    _MServiceLedger_UpdateAccountType_Handler,
		},
		{
			MethodName: "delete_account_type",
			Handler:    _MServiceLedger_DeleteAccountType_Handler,
		},
		{
			MethodName: "get_account_type_by_id",
			Handler:    _MServiceLedger_GetAccountTypeById_Handler,
		},
		{
			MethodName: "get_account_types_by_mservice",
			Handler:    _MServiceLedger_GetAccountTypesByMservice_Handler,
		},
		{
			MethodName: "create_transaction_type",
			Handler:    _MServiceLedger_CreateTransactionType_Handler,
		},
		{
			MethodName: "update_transaction_type",
			Handler:    _MServiceLedger_UpdateTransactionType_Handler,
		},
		{
			MethodName: "delete_transaction_type",
			Handler:    _MServiceLedger_DeleteTransactionType_Handler,
		},
		{
			MethodName: "get_transaction_type_by_id",
			Handler:    _MServiceLedger_GetTransactionTypeById_Handler,
		},
		{
			MethodName: "get_transaction_types_by_mservice",
			Handler:    _MServiceLedger_GetTransactionTypesByMservice_Handler,
		},
		{
			MethodName: "create_party",
			Handler:    _MServiceLedger_CreateParty_Handler,
		},
		{
			MethodName: "update_party",
			Handler:    _MServiceLedger_UpdateParty_Handler,
		},
		{
			MethodName: "delete_party",
			Handler:    _MServiceLedger_DeleteParty_Handler,
		},
		{
			MethodName: "get_party_by_id",
			Handler:    _MServiceLedger_GetPartyById_Handler,
		},
		{
			MethodName: "get_parties_by_mservice",
			Handler:    _MServiceLedger_GetPartiesByMservice_Handler,
		},
		{
			MethodName: "create_account",
			Handler:    _MServiceLedger_CreateAccount_Handler,
		},
		{
			MethodName: "update_account",
			Handler:    _MServiceLedger_UpdateAccount_Handler,
		},
		{
			MethodName: "delete_account",
			Handler:    _MServiceLedger_DeleteAccount_Handler,
		},
		{
			MethodName: "get_account_by_id",
			Handler:    _MServiceLedger_GetAccountById_Handler,
		},
		{
			MethodName: "get_accounts_by_organization",
			Handler:    _MServiceLedger_GetAccountsByOrganization_Handler,
		},
		{
			MethodName: "create_transaction",
			Handler:    _MServiceLedger_CreateTransaction_Handler,
		},
		{
			MethodName: "update_transaction",
			Handler:    _MServiceLedger_UpdateTransaction_Handler,
		},
		{
			MethodName: "delete_transaction",
			Handler:    _MServiceLedger_DeleteTransaction_Handler,
		},
		{
			MethodName: "get_transaction_by_id",
			Handler:    _MServiceLedger_GetTransactionById_Handler,
		},
		{
			MethodName: "get_transaction_wrapper_by_id",
			Handler:    _MServiceLedger_GetTransactionWrapperById_Handler,
		},
		{
			MethodName: "get_transaction_wrappers_by_date",
			Handler:    _MServiceLedger_GetTransactionWrappersByDate_Handler,
		},
		{
			MethodName: "add_transaction_details",
			Handler:    _MServiceLedger_AddTransactionDetails_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceLedger_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceLedger.proto",
}
